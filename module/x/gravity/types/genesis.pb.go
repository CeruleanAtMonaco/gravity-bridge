// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: gravity/v1/genesis.proto

package types

import (
	fmt "fmt"
	github_com_cosmos_cosmos_sdk_types "github.com/cosmos/cosmos-sdk/types"
	_ "github.com/gogo/protobuf/gogoproto"
	proto "github.com/gogo/protobuf/proto"
	io "io"
	math "math"
	math_bits "math/bits"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

// Params represent the Gravity genesis and store parameters
// bridge_ethereum_address:
// is address of the bridge contract on the Ethereum side, this is a
// reference value for governance only and is not actually used by any
// Gravity code
//
// signed_valsets_window
// signed_batches_window
// signed_claims_window
//
// These values represent the time in blocks that a validator has to submit
// a signature for a batch or valset, or to submit a claim for a particular
// attestation nonce. In the case of attestations this clock starts when the
// attestation is created, but only allows for slashing once the event has passed
//
// target_batch_timeout:
//
// This is the 'target' value for when batches time out, this is a target becuase
// Ethereum is a probabalistic chain and you can't say for sure what the block
// frequency is ahead of time.
//
// average_block_time
// average_ethereum_block_time
//
// These values are the average Cosmos block time and Ethereum block time repsectively
// and they are used to copute what the target batch timeout is. It is important that
// governance updates these in case of any major, prolonged change in the time it takes
// to produce a block
//
// slash_fraction_valset
// slash_fraction_batch
// slash_fraction_claim
// slash_fraction_conflicting_claim
//
// The slashing fractions for the various gravity related slashing conditions. The first three
// refer to not submitting a particular message, the third for submitting a different claim
// for the same Ethereum event
type Params struct {
	// address of the bridge contract on the EVM chain
	BridgeContractAddress string `protobuf:"bytes,1,opt,name=bridge_contract_address,json=bridgeContractAddress,proto3" json:"bridge_contract_address,omitempty"`
	// unique identifier of the EVM chain
	BridgeChainId uint64 `protobuf:"varint,2,opt,name=bridge_chain_id,json=bridgeChainId,proto3" json:"bridge_chain_id,omitempty"`
	// target value for when batch transactions time out on Ethereum
	TargetBatchTimeout uint64 `protobuf:"varint,3,opt,name=target_batch_timeout,json=targetBatchTimeout,proto3" json:"target_batch_timeout,omitempty"`
	// Average Cosmos block time used to compute batch timeout
	AverageBlockTime uint64 `protobuf:"varint,4,opt,name=average_block_time,json=averageBlockTime,proto3" json:"average_block_time,omitempty"`
	// Average ethereum block time used to compute batch timeout
	AverageEthereumBlockTime uint64 `protobuf:"varint,5,opt,name=average_ethereum_block_time,json=averageEthereumBlockTime,proto3" json:"average_ethereum_block_time,omitempty"`
	// amount of blocks of the rolling window required to submit a signature for a signer set confirmation.
	SignersetWindow uint64 `protobuf:"varint,6,opt,name=signerset_window,json=signersetWindow,proto3" json:"signerset_window,omitempty"`
	// amount of blocks of the rolling window required to submit a signature for a batch transaction.
	BatchTxWindow uint64 `protobuf:"varint,7,opt,name=batch_tx_window,json=batchTxWindow,proto3" json:"batch_tx_window,omitempty"`
	// amount of blocks of the rolling window required to attest an ethereum event.
	EventWindow     uint64 `protobuf:"varint,8,opt,name=event_window,json=eventWindow,proto3" json:"event_window,omitempty"`
	UnbondingWindow uint64 `protobuf:"varint,9,opt,name=unbonding_window,json=unbondingWindow,proto3" json:"unbonding_window,omitempty"`
	// slashing fraction for not signing a signerset confirmation
	SlashFractionSignerset github_com_cosmos_cosmos_sdk_types.Dec `protobuf:"bytes,10,opt,name=slash_fraction_signerset,json=slashFractionSignerset,proto3,customtype=github.com/cosmos/cosmos-sdk/types.Dec" json:"slash_fraction_signerset"`
	// slashing fraction for not signing an outgoing batch transaction to ethereum
	SlashFractionBatch github_com_cosmos_cosmos_sdk_types.Dec `protobuf:"bytes,11,opt,name=slash_fraction_batch,json=slashFractionBatch,proto3,customtype=github.com/cosmos/cosmos-sdk/types.Dec" json:"slash_fraction_batch"`
	// slashing fraction for not signing events
	SlashFractionEvent github_com_cosmos_cosmos_sdk_types.Dec `protobuf:"bytes,12,opt,name=slash_fraction_event,json=slashFractionEvent,proto3,customtype=github.com/cosmos/cosmos-sdk/types.Dec" json:"slash_fraction_event"`
	// slashing fraction for submitting a conflicting event from Ethereum
	SlashFractionConflictingEvent github_com_cosmos_cosmos_sdk_types.Dec `protobuf:"bytes,13,opt,name=slash_fraction_conflicting_event,json=slashFractionConflictingEvent,proto3,customtype=github.com/cosmos/cosmos-sdk/types.Dec" json:"slash_fraction_conflicting_event"`
}

func (m *Params) Reset()         { *m = Params{} }
func (m *Params) String() string { return proto.CompactTextString(m) }
func (*Params) ProtoMessage()    {}
func (*Params) Descriptor() ([]byte, []int) {
	return fileDescriptor_387b0aba880adb60, []int{0}
}
func (m *Params) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *Params) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_Params.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *Params) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Params.Merge(m, src)
}
func (m *Params) XXX_Size() int {
	return m.Size()
}
func (m *Params) XXX_DiscardUnknown() {
	xxx_messageInfo_Params.DiscardUnknown(m)
}

var xxx_messageInfo_Params proto.InternalMessageInfo

func (m *Params) GetBridgeContractAddress() string {
	if m != nil {
		return m.BridgeContractAddress
	}
	return ""
}

func (m *Params) GetBridgeChainId() uint64 {
	if m != nil {
		return m.BridgeChainId
	}
	return 0
}

func (m *Params) GetTargetBatchTimeout() uint64 {
	if m != nil {
		return m.TargetBatchTimeout
	}
	return 0
}

func (m *Params) GetAverageBlockTime() uint64 {
	if m != nil {
		return m.AverageBlockTime
	}
	return 0
}

func (m *Params) GetAverageEthereumBlockTime() uint64 {
	if m != nil {
		return m.AverageEthereumBlockTime
	}
	return 0
}

func (m *Params) GetSignersetWindow() uint64 {
	if m != nil {
		return m.SignersetWindow
	}
	return 0
}

func (m *Params) GetBatchTxWindow() uint64 {
	if m != nil {
		return m.BatchTxWindow
	}
	return 0
}

func (m *Params) GetEventWindow() uint64 {
	if m != nil {
		return m.EventWindow
	}
	return 0
}

func (m *Params) GetUnbondingWindow() uint64 {
	if m != nil {
		return m.UnbondingWindow
	}
	return 0
}

// ERC20ToDenom records the relationship between an ERC20 token contract and the
// denomination of the corresponding Cosmos coin.
type ERC20ToDenom struct {
	// token contract address in hex format
	Erc20Address string `protobuf:"bytes,1,opt,name=erc20_address,json=erc20Address,proto3" json:"erc20_address,omitempty"`
	// coin denomination
	Denom string `protobuf:"bytes,2,opt,name=denom,proto3" json:"denom,omitempty"`
}

func (m *ERC20ToDenom) Reset()         { *m = ERC20ToDenom{} }
func (m *ERC20ToDenom) String() string { return proto.CompactTextString(m) }
func (*ERC20ToDenom) ProtoMessage()    {}
func (*ERC20ToDenom) Descriptor() ([]byte, []int) {
	return fileDescriptor_387b0aba880adb60, []int{1}
}
func (m *ERC20ToDenom) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ERC20ToDenom) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_ERC20ToDenom.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *ERC20ToDenom) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ERC20ToDenom.Merge(m, src)
}
func (m *ERC20ToDenom) XXX_Size() int {
	return m.Size()
}
func (m *ERC20ToDenom) XXX_DiscardUnknown() {
	xxx_messageInfo_ERC20ToDenom.DiscardUnknown(m)
}

var xxx_messageInfo_ERC20ToDenom proto.InternalMessageInfo

func (m *ERC20ToDenom) GetErc20Address() string {
	if m != nil {
		return m.Erc20Address
	}
	return ""
}

func (m *ERC20ToDenom) GetDenom() string {
	if m != nil {
		return m.Denom
	}
	return ""
}

// GenesisState struct
type GenesisState struct {
	Params            Params         `protobuf:"bytes,1,opt,name=params,proto3" json:"params"`
	LastObservedNonce uint64         `protobuf:"varint,2,opt,name=last_observed_nonce,json=lastObservedNonce,proto3" json:"last_observed_nonce,omitempty"`
	Signersets        []EthSignerSet `protobuf:"bytes,3,rep,name=signersets,proto3" json:"signersets"`
	// requested batc transactions
	BatchTxs     []BatchTx     `protobuf:"bytes,4,rep,name=batch_txs,json=batchTxs,proto3" json:"batch_txs"`
	LogicCallTxs []LogicCallTx `protobuf:"bytes,5,rep,name=logic_call_txs,json=logicCallTxs,proto3" json:"logic_call_txs"`
	// unbatched transfer transactions
	TransferTxs       []TransferTx       `protobuf:"bytes,6,rep,name=transfer_txs,json=transferTxs,proto3" json:"transfer_txs"`
	ValsetConfirms    []ConfirmSignerSet `protobuf:"bytes,7,rep,name=valset_confirms,json=valsetConfirms,proto3" json:"valset_confirms"`
	BatchConfirms     []ConfirmBatch     `protobuf:"bytes,8,rep,name=batch_confirms,json=batchConfirms,proto3" json:"batch_confirms"`
	LogicCallConfirms []ConfirmLogicCall `protobuf:"bytes,9,rep,name=logic_call_confirms,json=logicCallConfirms,proto3" json:"logic_call_confirms"`
	Attestations      []Attestation      `protobuf:"bytes,10,rep,name=attestations,proto3" json:"attestations"`
	DelegateKeys      []MsgDelegateKey   `protobuf:"bytes,11,rep,name=delegate_keys,json=delegateKeys,proto3" json:"delegate_keys"`
	Erc20ToDenoms     []ERC20ToDenom     `protobuf:"bytes,12,rep,name=erc20_to_denoms,json=erc20ToDenoms,proto3" json:"erc20_to_denoms"`
}

func (m *GenesisState) Reset()         { *m = GenesisState{} }
func (m *GenesisState) String() string { return proto.CompactTextString(m) }
func (*GenesisState) ProtoMessage()    {}
func (*GenesisState) Descriptor() ([]byte, []int) {
	return fileDescriptor_387b0aba880adb60, []int{2}
}
func (m *GenesisState) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *GenesisState) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_GenesisState.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *GenesisState) XXX_Merge(src proto.Message) {
	xxx_messageInfo_GenesisState.Merge(m, src)
}
func (m *GenesisState) XXX_Size() int {
	return m.Size()
}
func (m *GenesisState) XXX_DiscardUnknown() {
	xxx_messageInfo_GenesisState.DiscardUnknown(m)
}

var xxx_messageInfo_GenesisState proto.InternalMessageInfo

func (m *GenesisState) GetParams() Params {
	if m != nil {
		return m.Params
	}
	return Params{}
}

func (m *GenesisState) GetLastObservedNonce() uint64 {
	if m != nil {
		return m.LastObservedNonce
	}
	return 0
}

func (m *GenesisState) GetSignersets() []EthSignerSet {
	if m != nil {
		return m.Signersets
	}
	return nil
}

func (m *GenesisState) GetBatchTxs() []BatchTx {
	if m != nil {
		return m.BatchTxs
	}
	return nil
}

func (m *GenesisState) GetLogicCallTxs() []LogicCallTx {
	if m != nil {
		return m.LogicCallTxs
	}
	return nil
}

func (m *GenesisState) GetTransferTxs() []TransferTx {
	if m != nil {
		return m.TransferTxs
	}
	return nil
}

func (m *GenesisState) GetValsetConfirms() []ConfirmSignerSet {
	if m != nil {
		return m.ValsetConfirms
	}
	return nil
}

func (m *GenesisState) GetBatchConfirms() []ConfirmBatch {
	if m != nil {
		return m.BatchConfirms
	}
	return nil
}

func (m *GenesisState) GetLogicCallConfirms() []ConfirmLogicCall {
	if m != nil {
		return m.LogicCallConfirms
	}
	return nil
}

func (m *GenesisState) GetAttestations() []Attestation {
	if m != nil {
		return m.Attestations
	}
	return nil
}

func (m *GenesisState) GetDelegateKeys() []MsgDelegateKey {
	if m != nil {
		return m.DelegateKeys
	}
	return nil
}

func (m *GenesisState) GetErc20ToDenoms() []ERC20ToDenom {
	if m != nil {
		return m.Erc20ToDenoms
	}
	return nil
}

func init() {
	proto.RegisterType((*Params)(nil), "gravity.v1.Params")
	proto.RegisterType((*ERC20ToDenom)(nil), "gravity.v1.ERC20ToDenom")
	proto.RegisterType((*GenesisState)(nil), "gravity.v1.GenesisState")
}

func init() { proto.RegisterFile("gravity/v1/genesis.proto", fileDescriptor_387b0aba880adb60) }

var fileDescriptor_387b0aba880adb60 = []byte{
	// 870 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xac, 0x55, 0xdd, 0x6e, 0xdb, 0x36,
	0x14, 0xb6, 0x17, 0xc7, 0x8d, 0x8f, 0x95, 0x9f, 0x32, 0x69, 0x4b, 0x64, 0x9b, 0xeb, 0x65, 0x40,
	0x91, 0x02, 0xab, 0xec, 0x7a, 0x40, 0x07, 0x0c, 0xd8, 0x86, 0xd8, 0x71, 0x87, 0xa2, 0xfb, 0x75,
	0x02, 0x0c, 0xd8, 0x8d, 0x46, 0x4b, 0x8c, 0x2c, 0x44, 0x12, 0x03, 0x91, 0x76, 0xec, 0xbb, 0x3d,
	0xc2, 0x1e, 0x63, 0x8f, 0xd2, 0xcb, 0xde, 0x0c, 0x18, 0x86, 0xa1, 0x18, 0x92, 0x17, 0x19, 0x78,
	0x48, 0xc9, 0xaa, 0x93, 0xdd, 0x14, 0xbb, 0xb2, 0x75, 0xbe, 0x9f, 0x43, 0x1e, 0xf1, 0xa3, 0x80,
	0x86, 0x19, 0x9b, 0x45, 0x6a, 0xd1, 0x99, 0x3d, 0xed, 0x84, 0x3c, 0xe5, 0x32, 0x92, 0xee, 0x45,
	0x26, 0x94, 0x20, 0x60, 0x11, 0x77, 0xf6, 0x74, 0x7f, 0x2f, 0x14, 0xa1, 0xc0, 0x72, 0x47, 0xff,
	0x33, 0x8c, 0xfd, 0x7b, 0x25, 0x6d, 0x22, 0x43, 0x2b, 0xdc, 0x2f, 0x5b, 0xfa, 0x22, 0x3d, 0x8b,
	0xb2, 0xe4, 0x16, 0x24, 0x77, 0x47, 0xe4, 0xe0, 0x8f, 0x3a, 0xd4, 0x7f, 0x60, 0x19, 0x4b, 0x24,
	0x79, 0x06, 0x0f, 0xc6, 0x59, 0x14, 0x84, 0xdc, 0xf3, 0x45, 0xaa, 0x32, 0xe6, 0x2b, 0x8f, 0x05,
	0x41, 0xc6, 0xa5, 0xa4, 0xd5, 0x76, 0xf5, 0xb0, 0x31, 0xba, 0x67, 0xe0, 0x81, 0x45, 0x8f, 0x0c,
	0x48, 0x1e, 0xc1, 0x76, 0xae, 0x9b, 0xb0, 0x28, 0xf5, 0xa2, 0x80, 0xbe, 0xd7, 0xae, 0x1e, 0xd6,
	0x46, 0x9b, 0x96, 0xaf, 0xab, 0x2f, 0x02, 0xd2, 0x85, 0x3d, 0xc5, 0xb2, 0x90, 0x2b, 0x6f, 0xcc,
	0x94, 0x3f, 0xf1, 0x54, 0x94, 0x70, 0x31, 0x55, 0x74, 0x0d, 0xc9, 0xc4, 0x60, 0x7d, 0x0d, 0x9d,
	0x1a, 0x84, 0x7c, 0x02, 0x84, 0xcd, 0x78, 0xc6, 0x42, 0xee, 0x8d, 0x63, 0xe1, 0x9f, 0xa3, 0x84,
	0xd6, 0x90, 0xbf, 0x63, 0x91, 0xbe, 0x06, 0xb4, 0x80, 0x7c, 0x01, 0xef, 0xe7, 0x6c, 0xae, 0x26,
	0x3c, 0xe3, 0xd3, 0xa4, 0x2c, 0x5b, 0x47, 0x19, 0xb5, 0x94, 0xa1, 0x65, 0x2c, 0xe5, 0x8f, 0x61,
	0x47, 0x46, 0x61, 0xca, 0x33, 0xc9, 0x95, 0x77, 0x19, 0xa5, 0x81, 0xb8, 0xa4, 0x75, 0xd4, 0x6c,
	0x17, 0xf5, 0x9f, 0xb0, 0x8c, 0x3b, 0x36, 0x5b, 0x98, 0xe7, 0xcc, 0x3b, 0x76, 0xc7, 0xb8, 0xfc,
	0xb9, 0xe5, 0x7d, 0x04, 0x0e, 0x9f, 0xf1, 0xb4, 0xb0, 0xdb, 0x40, 0x52, 0x13, 0x6b, 0x96, 0xf2,
	0x18, 0x76, 0xa6, 0xe9, 0x58, 0xa4, 0x41, 0x94, 0x86, 0x39, 0xad, 0x61, 0xba, 0x16, 0x75, 0x4b,
	0x9d, 0x00, 0x95, 0x31, 0x93, 0x13, 0xef, 0x4c, 0x4f, 0x3f, 0x12, 0xa9, 0x57, 0xac, 0x8b, 0x82,
	0x7e, 0x41, 0x7d, 0xf7, 0xd5, 0x9b, 0x87, 0x95, 0xbf, 0xde, 0x3c, 0x7c, 0x14, 0x46, 0x6a, 0x32,
	0x1d, 0xbb, 0xbe, 0x48, 0x3a, 0xbe, 0x90, 0x89, 0x90, 0xf6, 0xe7, 0x89, 0x0c, 0xce, 0x3b, 0x6a,
	0x71, 0xc1, 0xa5, 0x7b, 0xcc, 0xfd, 0xd1, 0x7d, 0xf4, 0x7b, 0x6e, 0xed, 0x4e, 0x72, 0x37, 0xf2,
	0x0b, 0xec, 0xad, 0x74, 0xc2, 0x7d, 0xd1, 0xe6, 0x3b, 0x75, 0x21, 0x6f, 0x75, 0xc1, 0x17, 0x7c,
	0x4b, 0x07, 0x1c, 0x0a, 0x75, 0xfe, 0x87, 0x0e, 0x43, 0xed, 0x44, 0x2e, 0xa1, 0xbd, 0xd2, 0x41,
	0x47, 0x22, 0x8e, 0x7c, 0xa5, 0x27, 0x6d, 0xba, 0x6d, 0xbe, 0x53, 0xb7, 0x0f, 0xdf, 0xea, 0x36,
	0x58, 0xba, 0x62, 0xe3, 0xcf, 0x6b, 0xbf, 0xfe, 0xdd, 0xae, 0x1c, 0xbc, 0x00, 0x67, 0x38, 0x1a,
	0xf4, 0xba, 0xa7, 0xe2, 0x98, 0xa7, 0x22, 0x21, 0x1f, 0xc3, 0x26, 0xcf, 0xfc, 0x5e, 0x77, 0x25,
	0x52, 0x0e, 0x16, 0xf3, 0x24, 0xed, 0xc1, 0x7a, 0xa0, 0xd9, 0x98, 0x9f, 0xc6, 0xc8, 0x3c, 0x1c,
	0xfc, 0x5e, 0x07, 0xe7, 0x6b, 0x73, 0x43, 0x9c, 0x28, 0xa6, 0x38, 0xe9, 0x42, 0xfd, 0x02, 0x23,
	0x8b, 0x26, 0xcd, 0x1e, 0x71, 0x97, 0x37, 0x86, 0x6b, 0xc2, 0xdc, 0xaf, 0xe9, 0x4d, 0x8d, 0x2c,
	0x8f, 0xb8, 0xb0, 0x1b, 0x33, 0xa9, 0x3c, 0x31, 0x96, 0x3c, 0x9b, 0xf1, 0xc0, 0x4b, 0x45, 0xea,
	0x73, 0x1b, 0xd3, 0xbb, 0x1a, 0xfa, 0xde, 0x22, 0xdf, 0x69, 0x80, 0x7c, 0x09, 0x50, 0x9c, 0x2d,
	0x49, 0xd7, 0xda, 0x6b, 0x87, 0xcd, 0x1e, 0x2d, 0x77, 0x19, 0xaa, 0x89, 0x39, 0x2e, 0x27, 0x5c,
	0xd9, 0x5e, 0x25, 0x05, 0x79, 0x06, 0x8d, 0x3c, 0x20, 0x92, 0xd6, 0x50, 0xbe, 0x5b, 0x96, 0x9b,
	0x94, 0xcf, 0xad, 0x72, 0xc3, 0xa6, 0x46, 0x92, 0x01, 0x6c, 0xc5, 0x22, 0x8c, 0x7c, 0xcf, 0x67,
	0x71, 0x8c, 0xe2, 0x75, 0x14, 0x3f, 0x28, 0x8b, 0xbf, 0xd1, 0x8c, 0x01, 0x8b, 0xe3, 0xc2, 0xc0,
	0x89, 0x97, 0x25, 0x49, 0xbe, 0x02, 0x47, 0x65, 0x2c, 0x95, 0x67, 0x3c, 0x43, 0x8b, 0x3a, 0x5a,
	0xdc, 0x2f, 0x5b, 0x9c, 0x5a, 0xbc, 0x70, 0x68, 0xaa, 0xa2, 0x22, 0xc9, 0x4b, 0xd8, 0x9e, 0xb1,
	0x58, 0x5f, 0x03, 0xf6, 0x16, 0x95, 0xf4, 0x0e, 0x7a, 0x7c, 0x50, 0xf6, 0x18, 0x18, 0x6c, 0x75,
	0x0c, 0x5b, 0x46, 0x6a, 0x51, 0x49, 0x86, 0xb0, 0x65, 0x46, 0x51, 0x78, 0x6d, 0xdc, 0x1c, 0xa7,
	0x65, 0xe3, 0x58, 0xac, 0x8f, 0xb9, 0x4a, 0x0a, 0x9b, 0x11, 0xec, 0x96, 0x26, 0x53, 0x78, 0x35,
	0xfe, 0x73, 0x5d, 0xc5, 0x94, 0xac, 0xdf, 0xdd, 0x62, 0x46, 0x85, 0xe7, 0x11, 0x38, 0x4c, 0x29,
	0x2e, 0x15, 0xd3, 0x07, 0x59, 0x52, 0xb8, 0x39, 0xeb, 0xa3, 0x25, 0x9e, 0xcf, 0xba, 0x2c, 0x21,
	0x43, 0xd8, 0x0c, 0x78, 0xcc, 0x43, 0xa6, 0xb8, 0x77, 0xce, 0x17, 0x92, 0x36, 0xd1, 0x63, 0xbf,
	0xec, 0xf1, 0xad, 0x0c, 0x8f, 0x2d, 0xe7, 0x25, 0x5f, 0xe4, 0x36, 0xc1, 0xb2, 0x24, 0xc9, 0x73,
	0xd8, 0x36, 0xe9, 0x50, 0xc2, 0xc3, 0x43, 0x2f, 0xa9, 0x73, 0xcb, 0xa1, 0x2b, 0x05, 0x2a, 0x9f,
	0x12, 0xca, 0x6c, 0x4d, 0xf6, 0x7f, 0x7c, 0x75, 0xd5, 0xaa, 0xbe, 0xbe, 0x6a, 0x55, 0xff, 0xb9,
	0x6a, 0x55, 0x7f, 0xbb, 0x6e, 0x55, 0x5e, 0x5f, 0xb7, 0x2a, 0x7f, 0x5e, 0xb7, 0x2a, 0x3f, 0x7f,
	0x76, 0x33, 0xdc, 0xd6, 0xf9, 0x89, 0xf9, 0x4a, 0x75, 0x12, 0x11, 0x4c, 0x63, 0xde, 0x99, 0xe7,
	0x75, 0x93, 0xf8, 0x71, 0x1d, 0xbf, 0x93, 0x9f, 0xfe, 0x1b, 0x00, 0x00, 0xff, 0xff, 0x13, 0xae,
	0xae, 0x51, 0xb0, 0x07, 0x00, 0x00,
}

func (m *Params) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Params) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *Params) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.SlashFractionConflictingEvent) > 0 {
		i -= len(m.SlashFractionConflictingEvent)
		copy(dAtA[i:], m.SlashFractionConflictingEvent)
		i = encodeVarintGenesis(dAtA, i, uint64(len(m.SlashFractionConflictingEvent)))
		i--
		dAtA[i] = 0x6a
	}
	if len(m.SlashFractionEvent) > 0 {
		i -= len(m.SlashFractionEvent)
		copy(dAtA[i:], m.SlashFractionEvent)
		i = encodeVarintGenesis(dAtA, i, uint64(len(m.SlashFractionEvent)))
		i--
		dAtA[i] = 0x62
	}
	if len(m.SlashFractionBatch) > 0 {
		i -= len(m.SlashFractionBatch)
		copy(dAtA[i:], m.SlashFractionBatch)
		i = encodeVarintGenesis(dAtA, i, uint64(len(m.SlashFractionBatch)))
		i--
		dAtA[i] = 0x5a
	}
	if len(m.SlashFractionSignerset) > 0 {
		i -= len(m.SlashFractionSignerset)
		copy(dAtA[i:], m.SlashFractionSignerset)
		i = encodeVarintGenesis(dAtA, i, uint64(len(m.SlashFractionSignerset)))
		i--
		dAtA[i] = 0x52
	}
	if m.UnbondingWindow != 0 {
		i = encodeVarintGenesis(dAtA, i, uint64(m.UnbondingWindow))
		i--
		dAtA[i] = 0x48
	}
	if m.EventWindow != 0 {
		i = encodeVarintGenesis(dAtA, i, uint64(m.EventWindow))
		i--
		dAtA[i] = 0x40
	}
	if m.BatchTxWindow != 0 {
		i = encodeVarintGenesis(dAtA, i, uint64(m.BatchTxWindow))
		i--
		dAtA[i] = 0x38
	}
	if m.SignersetWindow != 0 {
		i = encodeVarintGenesis(dAtA, i, uint64(m.SignersetWindow))
		i--
		dAtA[i] = 0x30
	}
	if m.AverageEthereumBlockTime != 0 {
		i = encodeVarintGenesis(dAtA, i, uint64(m.AverageEthereumBlockTime))
		i--
		dAtA[i] = 0x28
	}
	if m.AverageBlockTime != 0 {
		i = encodeVarintGenesis(dAtA, i, uint64(m.AverageBlockTime))
		i--
		dAtA[i] = 0x20
	}
	if m.TargetBatchTimeout != 0 {
		i = encodeVarintGenesis(dAtA, i, uint64(m.TargetBatchTimeout))
		i--
		dAtA[i] = 0x18
	}
	if m.BridgeChainId != 0 {
		i = encodeVarintGenesis(dAtA, i, uint64(m.BridgeChainId))
		i--
		dAtA[i] = 0x10
	}
	if len(m.BridgeContractAddress) > 0 {
		i -= len(m.BridgeContractAddress)
		copy(dAtA[i:], m.BridgeContractAddress)
		i = encodeVarintGenesis(dAtA, i, uint64(len(m.BridgeContractAddress)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *ERC20ToDenom) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ERC20ToDenom) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ERC20ToDenom) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Denom) > 0 {
		i -= len(m.Denom)
		copy(dAtA[i:], m.Denom)
		i = encodeVarintGenesis(dAtA, i, uint64(len(m.Denom)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.Erc20Address) > 0 {
		i -= len(m.Erc20Address)
		copy(dAtA[i:], m.Erc20Address)
		i = encodeVarintGenesis(dAtA, i, uint64(len(m.Erc20Address)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *GenesisState) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *GenesisState) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *GenesisState) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Erc20ToDenoms) > 0 {
		for iNdEx := len(m.Erc20ToDenoms) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.Erc20ToDenoms[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintGenesis(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x62
		}
	}
	if len(m.DelegateKeys) > 0 {
		for iNdEx := len(m.DelegateKeys) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.DelegateKeys[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintGenesis(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x5a
		}
	}
	if len(m.Attestations) > 0 {
		for iNdEx := len(m.Attestations) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.Attestations[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintGenesis(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x52
		}
	}
	if len(m.LogicCallConfirms) > 0 {
		for iNdEx := len(m.LogicCallConfirms) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.LogicCallConfirms[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintGenesis(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x4a
		}
	}
	if len(m.BatchConfirms) > 0 {
		for iNdEx := len(m.BatchConfirms) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.BatchConfirms[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintGenesis(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x42
		}
	}
	if len(m.ValsetConfirms) > 0 {
		for iNdEx := len(m.ValsetConfirms) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.ValsetConfirms[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintGenesis(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x3a
		}
	}
	if len(m.TransferTxs) > 0 {
		for iNdEx := len(m.TransferTxs) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.TransferTxs[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintGenesis(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x32
		}
	}
	if len(m.LogicCallTxs) > 0 {
		for iNdEx := len(m.LogicCallTxs) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.LogicCallTxs[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintGenesis(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x2a
		}
	}
	if len(m.BatchTxs) > 0 {
		for iNdEx := len(m.BatchTxs) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.BatchTxs[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintGenesis(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x22
		}
	}
	if len(m.Signersets) > 0 {
		for iNdEx := len(m.Signersets) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.Signersets[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintGenesis(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x1a
		}
	}
	if m.LastObservedNonce != 0 {
		i = encodeVarintGenesis(dAtA, i, uint64(m.LastObservedNonce))
		i--
		dAtA[i] = 0x10
	}
	{
		size, err := m.Params.MarshalToSizedBuffer(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = encodeVarintGenesis(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0xa
	return len(dAtA) - i, nil
}

func encodeVarintGenesis(dAtA []byte, offset int, v uint64) int {
	offset -= sovGenesis(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *Params) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.BridgeContractAddress)
	if l > 0 {
		n += 1 + l + sovGenesis(uint64(l))
	}
	if m.BridgeChainId != 0 {
		n += 1 + sovGenesis(uint64(m.BridgeChainId))
	}
	if m.TargetBatchTimeout != 0 {
		n += 1 + sovGenesis(uint64(m.TargetBatchTimeout))
	}
	if m.AverageBlockTime != 0 {
		n += 1 + sovGenesis(uint64(m.AverageBlockTime))
	}
	if m.AverageEthereumBlockTime != 0 {
		n += 1 + sovGenesis(uint64(m.AverageEthereumBlockTime))
	}
	if m.SignersetWindow != 0 {
		n += 1 + sovGenesis(uint64(m.SignersetWindow))
	}
	if m.BatchTxWindow != 0 {
		n += 1 + sovGenesis(uint64(m.BatchTxWindow))
	}
	if m.EventWindow != 0 {
		n += 1 + sovGenesis(uint64(m.EventWindow))
	}
	if m.UnbondingWindow != 0 {
		n += 1 + sovGenesis(uint64(m.UnbondingWindow))
	}
	l = len(m.SlashFractionSignerset)
	if l > 0 {
		n += 1 + l + sovGenesis(uint64(l))
	}
	l = len(m.SlashFractionBatch)
	if l > 0 {
		n += 1 + l + sovGenesis(uint64(l))
	}
	l = len(m.SlashFractionEvent)
	if l > 0 {
		n += 1 + l + sovGenesis(uint64(l))
	}
	l = len(m.SlashFractionConflictingEvent)
	if l > 0 {
		n += 1 + l + sovGenesis(uint64(l))
	}
	return n
}

func (m *ERC20ToDenom) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Erc20Address)
	if l > 0 {
		n += 1 + l + sovGenesis(uint64(l))
	}
	l = len(m.Denom)
	if l > 0 {
		n += 1 + l + sovGenesis(uint64(l))
	}
	return n
}

func (m *GenesisState) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = m.Params.Size()
	n += 1 + l + sovGenesis(uint64(l))
	if m.LastObservedNonce != 0 {
		n += 1 + sovGenesis(uint64(m.LastObservedNonce))
	}
	if len(m.Signersets) > 0 {
		for _, e := range m.Signersets {
			l = e.Size()
			n += 1 + l + sovGenesis(uint64(l))
		}
	}
	if len(m.BatchTxs) > 0 {
		for _, e := range m.BatchTxs {
			l = e.Size()
			n += 1 + l + sovGenesis(uint64(l))
		}
	}
	if len(m.LogicCallTxs) > 0 {
		for _, e := range m.LogicCallTxs {
			l = e.Size()
			n += 1 + l + sovGenesis(uint64(l))
		}
	}
	if len(m.TransferTxs) > 0 {
		for _, e := range m.TransferTxs {
			l = e.Size()
			n += 1 + l + sovGenesis(uint64(l))
		}
	}
	if len(m.ValsetConfirms) > 0 {
		for _, e := range m.ValsetConfirms {
			l = e.Size()
			n += 1 + l + sovGenesis(uint64(l))
		}
	}
	if len(m.BatchConfirms) > 0 {
		for _, e := range m.BatchConfirms {
			l = e.Size()
			n += 1 + l + sovGenesis(uint64(l))
		}
	}
	if len(m.LogicCallConfirms) > 0 {
		for _, e := range m.LogicCallConfirms {
			l = e.Size()
			n += 1 + l + sovGenesis(uint64(l))
		}
	}
	if len(m.Attestations) > 0 {
		for _, e := range m.Attestations {
			l = e.Size()
			n += 1 + l + sovGenesis(uint64(l))
		}
	}
	if len(m.DelegateKeys) > 0 {
		for _, e := range m.DelegateKeys {
			l = e.Size()
			n += 1 + l + sovGenesis(uint64(l))
		}
	}
	if len(m.Erc20ToDenoms) > 0 {
		for _, e := range m.Erc20ToDenoms {
			l = e.Size()
			n += 1 + l + sovGenesis(uint64(l))
		}
	}
	return n
}

func sovGenesis(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozGenesis(x uint64) (n int) {
	return sovGenesis(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *Params) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowGenesis
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Params: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Params: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field BridgeContractAddress", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenesis
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthGenesis
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthGenesis
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.BridgeContractAddress = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field BridgeChainId", wireType)
			}
			m.BridgeChainId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenesis
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.BridgeChainId |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field TargetBatchTimeout", wireType)
			}
			m.TargetBatchTimeout = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenesis
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.TargetBatchTimeout |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field AverageBlockTime", wireType)
			}
			m.AverageBlockTime = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenesis
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.AverageBlockTime |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 5:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field AverageEthereumBlockTime", wireType)
			}
			m.AverageEthereumBlockTime = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenesis
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.AverageEthereumBlockTime |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 6:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field SignersetWindow", wireType)
			}
			m.SignersetWindow = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenesis
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.SignersetWindow |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 7:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field BatchTxWindow", wireType)
			}
			m.BatchTxWindow = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenesis
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.BatchTxWindow |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 8:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field EventWindow", wireType)
			}
			m.EventWindow = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenesis
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.EventWindow |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 9:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field UnbondingWindow", wireType)
			}
			m.UnbondingWindow = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenesis
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.UnbondingWindow |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 10:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field SlashFractionSignerset", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenesis
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthGenesis
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthGenesis
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.SlashFractionSignerset = github_com_cosmos_cosmos_sdk_types.Dec(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 11:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field SlashFractionBatch", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenesis
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthGenesis
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthGenesis
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.SlashFractionBatch = github_com_cosmos_cosmos_sdk_types.Dec(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 12:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field SlashFractionEvent", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenesis
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthGenesis
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthGenesis
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.SlashFractionEvent = github_com_cosmos_cosmos_sdk_types.Dec(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 13:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field SlashFractionConflictingEvent", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenesis
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthGenesis
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthGenesis
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.SlashFractionConflictingEvent = github_com_cosmos_cosmos_sdk_types.Dec(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipGenesis(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthGenesis
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ERC20ToDenom) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowGenesis
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ERC20ToDenom: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ERC20ToDenom: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Erc20Address", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenesis
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthGenesis
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthGenesis
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Erc20Address = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Denom", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenesis
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthGenesis
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthGenesis
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Denom = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipGenesis(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthGenesis
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *GenesisState) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowGenesis
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: GenesisState: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: GenesisState: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Params", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenesis
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthGenesis
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthGenesis
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.Params.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field LastObservedNonce", wireType)
			}
			m.LastObservedNonce = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenesis
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.LastObservedNonce |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Signersets", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenesis
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthGenesis
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthGenesis
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Signersets = append(m.Signersets, EthSignerSet{})
			if err := m.Signersets[len(m.Signersets)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field BatchTxs", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenesis
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthGenesis
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthGenesis
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.BatchTxs = append(m.BatchTxs, BatchTx{})
			if err := m.BatchTxs[len(m.BatchTxs)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field LogicCallTxs", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenesis
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthGenesis
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthGenesis
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.LogicCallTxs = append(m.LogicCallTxs, LogicCallTx{})
			if err := m.LogicCallTxs[len(m.LogicCallTxs)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field TransferTxs", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenesis
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthGenesis
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthGenesis
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.TransferTxs = append(m.TransferTxs, TransferTx{})
			if err := m.TransferTxs[len(m.TransferTxs)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 7:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ValsetConfirms", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenesis
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthGenesis
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthGenesis
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ValsetConfirms = append(m.ValsetConfirms, ConfirmSignerSet{})
			if err := m.ValsetConfirms[len(m.ValsetConfirms)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 8:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field BatchConfirms", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenesis
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthGenesis
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthGenesis
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.BatchConfirms = append(m.BatchConfirms, ConfirmBatch{})
			if err := m.BatchConfirms[len(m.BatchConfirms)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 9:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field LogicCallConfirms", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenesis
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthGenesis
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthGenesis
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.LogicCallConfirms = append(m.LogicCallConfirms, ConfirmLogicCall{})
			if err := m.LogicCallConfirms[len(m.LogicCallConfirms)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 10:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Attestations", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenesis
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthGenesis
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthGenesis
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Attestations = append(m.Attestations, Attestation{})
			if err := m.Attestations[len(m.Attestations)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 11:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field DelegateKeys", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenesis
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthGenesis
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthGenesis
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.DelegateKeys = append(m.DelegateKeys, MsgDelegateKey{})
			if err := m.DelegateKeys[len(m.DelegateKeys)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 12:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Erc20ToDenoms", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenesis
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthGenesis
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthGenesis
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Erc20ToDenoms = append(m.Erc20ToDenoms, ERC20ToDenom{})
			if err := m.Erc20ToDenoms[len(m.Erc20ToDenoms)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipGenesis(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthGenesis
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipGenesis(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowGenesis
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowGenesis
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowGenesis
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthGenesis
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupGenesis
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthGenesis
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthGenesis        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowGenesis          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupGenesis = fmt.Errorf("proto: unexpected end of group")
)
