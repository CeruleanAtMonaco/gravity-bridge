// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: gravity/v1/confirm.proto

package types

import (
	fmt "fmt"
	github_com_ethereum_go_ethereum_common_hexutil "github.com/ethereum/go-ethereum/common/hexutil"
	_ "github.com/gogo/protobuf/gogoproto"
	proto "github.com/gogo/protobuf/proto"
	github_com_tendermint_tendermint_libs_bytes "github.com/tendermint/tendermint/libs/bytes"
	io "io"
	math "math"
	math_bits "math/bits"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

// ConfirmLogicCall confirms an outgoing logic call
type ConfirmLogicCall struct {
	InvalidationId    github_com_tendermint_tendermint_libs_bytes.HexBytes `protobuf:"bytes,1,opt,name=invalidation_id,json=invalidationId,proto3,casttype=github.com/tendermint/tendermint/libs/bytes.HexBytes" json:"invalidation_id,omitempty"`
	InvalidationNonce uint64                                               `protobuf:"varint,2,opt,name=invalidation_nonce,json=invalidationNonce,proto3" json:"invalidation_nonce,omitempty"`
	Signature         github_com_ethereum_go_ethereum_common_hexutil.Bytes `protobuf:"bytes,3,opt,name=signature,proto3,casttype=github.com/ethereum/go-ethereum/common/hexutil.Bytes" json:"signature,omitempty"`
}

func (m *ConfirmLogicCall) Reset()         { *m = ConfirmLogicCall{} }
func (m *ConfirmLogicCall) String() string { return proto.CompactTextString(m) }
func (*ConfirmLogicCall) ProtoMessage()    {}
func (*ConfirmLogicCall) Descriptor() ([]byte, []int) {
	return fileDescriptor_9fd753ee695c4d9b, []int{0}
}
func (m *ConfirmLogicCall) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ConfirmLogicCall) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_ConfirmLogicCall.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *ConfirmLogicCall) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ConfirmLogicCall.Merge(m, src)
}
func (m *ConfirmLogicCall) XXX_Size() int {
	return m.Size()
}
func (m *ConfirmLogicCall) XXX_DiscardUnknown() {
	xxx_messageInfo_ConfirmLogicCall.DiscardUnknown(m)
}

var xxx_messageInfo_ConfirmLogicCall proto.InternalMessageInfo

func (m *ConfirmLogicCall) GetInvalidationId() github_com_tendermint_tendermint_libs_bytes.HexBytes {
	if m != nil {
		return m.InvalidationId
	}
	return nil
}

func (m *ConfirmLogicCall) GetInvalidationNonce() uint64 {
	if m != nil {
		return m.InvalidationNonce
	}
	return 0
}

func (m *ConfirmLogicCall) GetSignature() github_com_ethereum_go_ethereum_common_hexutil.Bytes {
	if m != nil {
		return m.Signature
	}
	return nil
}

// ConfirmBatch an orchestrator confirms a batch transaction by signing
// with the ethereum keys on the signer set.
type ConfirmBatch struct {
	TokenContract string                                               `protobuf:"bytes,1,opt,name=token_contract,json=tokenContract,proto3" json:"token_contract,omitempty"`
	Nonce         uint64                                               `protobuf:"varint,2,opt,name=nonce,proto3" json:"nonce,omitempty"`
	Signature     github_com_ethereum_go_ethereum_common_hexutil.Bytes `protobuf:"bytes,3,opt,name=signature,proto3,casttype=github.com/ethereum/go-ethereum/common/hexutil.Bytes" json:"signature,omitempty"`
}

func (m *ConfirmBatch) Reset()         { *m = ConfirmBatch{} }
func (m *ConfirmBatch) String() string { return proto.CompactTextString(m) }
func (*ConfirmBatch) ProtoMessage()    {}
func (*ConfirmBatch) Descriptor() ([]byte, []int) {
	return fileDescriptor_9fd753ee695c4d9b, []int{1}
}
func (m *ConfirmBatch) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ConfirmBatch) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_ConfirmBatch.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *ConfirmBatch) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ConfirmBatch.Merge(m, src)
}
func (m *ConfirmBatch) XXX_Size() int {
	return m.Size()
}
func (m *ConfirmBatch) XXX_DiscardUnknown() {
	xxx_messageInfo_ConfirmBatch.DiscardUnknown(m)
}

var xxx_messageInfo_ConfirmBatch proto.InternalMessageInfo

func (m *ConfirmBatch) GetTokenContract() string {
	if m != nil {
		return m.TokenContract
	}
	return ""
}

func (m *ConfirmBatch) GetNonce() uint64 {
	if m != nil {
		return m.Nonce
	}
	return 0
}

func (m *ConfirmBatch) GetSignature() github_com_ethereum_go_ethereum_common_hexutil.Bytes {
	if m != nil {
		return m.Signature
	}
	return nil
}

// ConfirmSignerSet submits a signature of the validator set at a given block height. A validator
// must first call MsgSetEthAddress to set their Ethereum address to be used for signing.
// Finally validators sign the
// validator set, powers, and Ethereum addresses of the entire validator set at the height of a
// ValsetRequest and submit that signature with this message.
//
// If a sufficient number of validators (66% of voting power) (A) have set Ethereum addresses and
// (B) submit ValsetConfirm messages with their signatures it is then possible for anyone to view
// these signatures in the chain store and submit them to Ethereum to update the validator set
type ConfirmSignerSet struct {
	Nonce     uint64                                               `protobuf:"varint,1,opt,name=nonce,proto3" json:"nonce,omitempty"`
	Signature github_com_ethereum_go_ethereum_common_hexutil.Bytes `protobuf:"bytes,2,opt,name=signature,proto3,casttype=github.com/ethereum/go-ethereum/common/hexutil.Bytes" json:"signature,omitempty"`
}

func (m *ConfirmSignerSet) Reset()         { *m = ConfirmSignerSet{} }
func (m *ConfirmSignerSet) String() string { return proto.CompactTextString(m) }
func (*ConfirmSignerSet) ProtoMessage()    {}
func (*ConfirmSignerSet) Descriptor() ([]byte, []int) {
	return fileDescriptor_9fd753ee695c4d9b, []int{2}
}
func (m *ConfirmSignerSet) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ConfirmSignerSet) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_ConfirmSignerSet.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *ConfirmSignerSet) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ConfirmSignerSet.Merge(m, src)
}
func (m *ConfirmSignerSet) XXX_Size() int {
	return m.Size()
}
func (m *ConfirmSignerSet) XXX_DiscardUnknown() {
	xxx_messageInfo_ConfirmSignerSet.DiscardUnknown(m)
}

var xxx_messageInfo_ConfirmSignerSet proto.InternalMessageInfo

func (m *ConfirmSignerSet) GetNonce() uint64 {
	if m != nil {
		return m.Nonce
	}
	return 0
}

func (m *ConfirmSignerSet) GetSignature() github_com_ethereum_go_ethereum_common_hexutil.Bytes {
	if m != nil {
		return m.Signature
	}
	return nil
}

func init() {
	proto.RegisterType((*ConfirmLogicCall)(nil), "gravity.v1.ConfirmLogicCall")
	proto.RegisterType((*ConfirmBatch)(nil), "gravity.v1.ConfirmBatch")
	proto.RegisterType((*ConfirmSignerSet)(nil), "gravity.v1.ConfirmSignerSet")
}

func init() { proto.RegisterFile("gravity/v1/confirm.proto", fileDescriptor_9fd753ee695c4d9b) }

var fileDescriptor_9fd753ee695c4d9b = []byte{
	// 372 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xb4, 0x92, 0x3f, 0x8b, 0xdb, 0x30,
	0x18, 0xc6, 0xa3, 0xf4, 0x0f, 0x44, 0xa4, 0x69, 0x6b, 0x32, 0x98, 0x0e, 0x6e, 0x08, 0x14, 0xb2,
	0xc4, 0x22, 0xb4, 0xd0, 0xce, 0xce, 0xd2, 0x42, 0x29, 0x34, 0x81, 0x0e, 0x5d, 0x82, 0x2c, 0xbf,
	0x95, 0x45, 0x2d, 0xbd, 0x41, 0x96, 0x4d, 0xb2, 0xf5, 0x23, 0xf4, 0x3b, 0xf4, 0xcb, 0x74, 0xcc,
	0xd8, 0xa9, 0x1c, 0xc9, 0xb7, 0x38, 0x6e, 0x38, 0x62, 0xfb, 0x2e, 0x3e, 0xb8, 0xdb, 0xee, 0xb6,
	0xc7, 0xcf, 0x63, 0x3d, 0xfa, 0xbd, 0xe8, 0xa5, 0xbe, 0xb4, 0xbc, 0x54, 0x6e, 0xcb, 0xca, 0x19,
	0x13, 0x68, 0x7e, 0x28, 0xab, 0xc3, 0xb5, 0x45, 0x87, 0x1e, 0x6d, 0x92, 0xb0, 0x9c, 0xbd, 0x1a,
	0x4a, 0x94, 0x58, 0xd9, 0xec, 0xa8, 0xea, 0x3f, 0xc6, 0x17, 0x84, 0xbe, 0x98, 0xd7, 0x67, 0x3e,
	0xa3, 0x54, 0x62, 0xce, 0xb3, 0xcc, 0xe3, 0xf4, 0xb9, 0x32, 0x25, 0xcf, 0x54, 0xc2, 0x9d, 0x42,
	0xb3, 0x52, 0x89, 0x4f, 0x46, 0x64, 0xd2, 0x8f, 0x3e, 0x9c, 0xff, 0x7f, 0xfd, 0x4e, 0x2a, 0x97,
	0x16, 0x71, 0x28, 0x50, 0x33, 0x07, 0x26, 0x01, 0xab, 0x95, 0x71, 0x6d, 0x99, 0xa9, 0x38, 0x67,
	0xf1, 0xd6, 0x41, 0x1e, 0x7e, 0x84, 0x4d, 0x74, 0x14, 0x8b, 0x41, 0xbb, 0xf0, 0x53, 0xe2, 0x4d,
	0xa9, 0x77, 0xe3, 0x0a, 0x83, 0x46, 0x80, 0xdf, 0x1d, 0x91, 0xc9, 0xe3, 0xc5, 0xcb, 0x76, 0xf2,
	0xe5, 0x18, 0x78, 0xdf, 0x68, 0x2f, 0x57, 0xd2, 0x70, 0x57, 0x58, 0xf0, 0x1f, 0xdd, 0xca, 0x02,
	0x2e, 0x05, 0x0b, 0x85, 0x66, 0x12, 0xa7, 0xd7, 0x5a, 0xa0, 0xd6, 0x68, 0x58, 0x0a, 0x9b, 0xc2,
	0xa9, 0x2c, 0xac, 0x59, 0x4e, 0x55, 0xe3, 0x3f, 0x84, 0xf6, 0x9b, 0xf1, 0x23, 0xee, 0x44, 0xea,
	0xbd, 0xa1, 0x03, 0x87, 0x3f, 0xc1, 0xac, 0x04, 0x1a, 0x67, 0xb9, 0x70, 0xd5, 0xe4, 0xbd, 0xc5,
	0xb3, 0xca, 0x9d, 0x37, 0xa6, 0x37, 0xa4, 0x4f, 0xda, 0xc4, 0xf5, 0xc7, 0x83, 0x51, 0xfe, 0x3a,
	0x3d, 0xd2, 0x52, 0x49, 0x03, 0x76, 0x09, 0x2d, 0x04, 0x72, 0x27, 0x42, 0xf7, 0xde, 0x10, 0xa2,
	0xaf, 0x7f, 0xf7, 0x01, 0xd9, 0xed, 0x03, 0x72, 0xb6, 0x0f, 0xc8, 0xef, 0x43, 0xd0, 0xd9, 0x1d,
	0x82, 0xce, 0xbf, 0x43, 0xd0, 0xf9, 0xfe, 0xbe, 0x55, 0x2d, 0x30, 0xd7, 0x98, 0xb3, 0x66, 0xeb,
	0xa6, 0xb1, 0x55, 0x89, 0x04, 0xa6, 0x31, 0x29, 0x32, 0x60, 0x9b, 0x2b, 0x9f, 0xb9, 0xed, 0x1a,
	0xf2, 0xf8, 0x69, 0xb5, 0x81, 0x6f, 0x2f, 0x03, 0x00, 0x00, 0xff, 0xff, 0x06, 0xe1, 0x6c, 0xc2,
	0xbf, 0x02, 0x00, 0x00,
}

func (m *ConfirmLogicCall) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ConfirmLogicCall) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ConfirmLogicCall) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Signature) > 0 {
		i -= len(m.Signature)
		copy(dAtA[i:], m.Signature)
		i = encodeVarintConfirm(dAtA, i, uint64(len(m.Signature)))
		i--
		dAtA[i] = 0x1a
	}
	if m.InvalidationNonce != 0 {
		i = encodeVarintConfirm(dAtA, i, uint64(m.InvalidationNonce))
		i--
		dAtA[i] = 0x10
	}
	if len(m.InvalidationId) > 0 {
		i -= len(m.InvalidationId)
		copy(dAtA[i:], m.InvalidationId)
		i = encodeVarintConfirm(dAtA, i, uint64(len(m.InvalidationId)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *ConfirmBatch) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ConfirmBatch) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ConfirmBatch) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Signature) > 0 {
		i -= len(m.Signature)
		copy(dAtA[i:], m.Signature)
		i = encodeVarintConfirm(dAtA, i, uint64(len(m.Signature)))
		i--
		dAtA[i] = 0x1a
	}
	if m.Nonce != 0 {
		i = encodeVarintConfirm(dAtA, i, uint64(m.Nonce))
		i--
		dAtA[i] = 0x10
	}
	if len(m.TokenContract) > 0 {
		i -= len(m.TokenContract)
		copy(dAtA[i:], m.TokenContract)
		i = encodeVarintConfirm(dAtA, i, uint64(len(m.TokenContract)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *ConfirmSignerSet) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ConfirmSignerSet) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ConfirmSignerSet) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Signature) > 0 {
		i -= len(m.Signature)
		copy(dAtA[i:], m.Signature)
		i = encodeVarintConfirm(dAtA, i, uint64(len(m.Signature)))
		i--
		dAtA[i] = 0x12
	}
	if m.Nonce != 0 {
		i = encodeVarintConfirm(dAtA, i, uint64(m.Nonce))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func encodeVarintConfirm(dAtA []byte, offset int, v uint64) int {
	offset -= sovConfirm(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *ConfirmLogicCall) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.InvalidationId)
	if l > 0 {
		n += 1 + l + sovConfirm(uint64(l))
	}
	if m.InvalidationNonce != 0 {
		n += 1 + sovConfirm(uint64(m.InvalidationNonce))
	}
	l = len(m.Signature)
	if l > 0 {
		n += 1 + l + sovConfirm(uint64(l))
	}
	return n
}

func (m *ConfirmBatch) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.TokenContract)
	if l > 0 {
		n += 1 + l + sovConfirm(uint64(l))
	}
	if m.Nonce != 0 {
		n += 1 + sovConfirm(uint64(m.Nonce))
	}
	l = len(m.Signature)
	if l > 0 {
		n += 1 + l + sovConfirm(uint64(l))
	}
	return n
}

func (m *ConfirmSignerSet) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Nonce != 0 {
		n += 1 + sovConfirm(uint64(m.Nonce))
	}
	l = len(m.Signature)
	if l > 0 {
		n += 1 + l + sovConfirm(uint64(l))
	}
	return n
}

func sovConfirm(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozConfirm(x uint64) (n int) {
	return sovConfirm(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *ConfirmLogicCall) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowConfirm
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ConfirmLogicCall: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ConfirmLogicCall: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field InvalidationId", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowConfirm
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthConfirm
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthConfirm
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.InvalidationId = append(m.InvalidationId[:0], dAtA[iNdEx:postIndex]...)
			if m.InvalidationId == nil {
				m.InvalidationId = []byte{}
			}
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field InvalidationNonce", wireType)
			}
			m.InvalidationNonce = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowConfirm
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.InvalidationNonce |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Signature", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowConfirm
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthConfirm
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthConfirm
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Signature = append(m.Signature[:0], dAtA[iNdEx:postIndex]...)
			if m.Signature == nil {
				m.Signature = []byte{}
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipConfirm(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthConfirm
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthConfirm
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ConfirmBatch) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowConfirm
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ConfirmBatch: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ConfirmBatch: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field TokenContract", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowConfirm
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthConfirm
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthConfirm
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.TokenContract = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Nonce", wireType)
			}
			m.Nonce = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowConfirm
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Nonce |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Signature", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowConfirm
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthConfirm
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthConfirm
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Signature = append(m.Signature[:0], dAtA[iNdEx:postIndex]...)
			if m.Signature == nil {
				m.Signature = []byte{}
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipConfirm(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthConfirm
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthConfirm
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ConfirmSignerSet) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowConfirm
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ConfirmSignerSet: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ConfirmSignerSet: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Nonce", wireType)
			}
			m.Nonce = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowConfirm
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Nonce |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Signature", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowConfirm
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthConfirm
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthConfirm
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Signature = append(m.Signature[:0], dAtA[iNdEx:postIndex]...)
			if m.Signature == nil {
				m.Signature = []byte{}
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipConfirm(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthConfirm
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthConfirm
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipConfirm(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowConfirm
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowConfirm
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowConfirm
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthConfirm
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupConfirm
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthConfirm
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthConfirm        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowConfirm          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupConfirm = fmt.Errorf("proto: unexpected end of group")
)
