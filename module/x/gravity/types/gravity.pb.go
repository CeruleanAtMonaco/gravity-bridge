// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: gravity/v1/gravity.proto

package types

import (
	fmt "fmt"
	types "github.com/cosmos/cosmos-sdk/codec/types"
	types1 "github.com/cosmos/cosmos-sdk/types"
	_ "github.com/gogo/protobuf/gogoproto"
	proto "github.com/gogo/protobuf/proto"
	_ "github.com/regen-network/cosmos-proto"
	github_com_tendermint_tendermint_libs_bytes "github.com/tendermint/tendermint/libs/bytes"
	_ "google.golang.org/protobuf/types/known/timestamppb"
	io "io"
	math "math"
	math_bits "math/bits"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

// Attestation is an event that is pending of confirmation by 2/3 of the signer set.
// The event is then attested and executed in the state machine once the required
// threshold is met.
type Attestation struct {
	Event  *types.Any `protobuf:"bytes,1,opt,name=event,proto3" json:"event,omitempty"`
	Votes  []string   `protobuf:"bytes,2,rep,name=votes,proto3" json:"votes,omitempty"`
	Height uint64     `protobuf:"varint,3,opt,name=height,proto3" json:"height,omitempty"`
}

func (m *Attestation) Reset()         { *m = Attestation{} }
func (m *Attestation) String() string { return proto.CompactTextString(m) }
func (*Attestation) ProtoMessage()    {}
func (*Attestation) Descriptor() ([]byte, []int) {
	return fileDescriptor_1715a041eadeb531, []int{0}
}
func (m *Attestation) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *Attestation) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_Attestation.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *Attestation) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Attestation.Merge(m, src)
}
func (m *Attestation) XXX_Size() int {
	return m.Size()
}
func (m *Attestation) XXX_DiscardUnknown() {
	xxx_messageInfo_Attestation.DiscardUnknown(m)
}

var xxx_messageInfo_Attestation proto.InternalMessageInfo

func (m *Attestation) GetEvent() *types.Any {
	if m != nil {
		return m.Event
	}
	return nil
}

func (m *Attestation) GetVotes() []string {
	if m != nil {
		return m.Votes
	}
	return nil
}

func (m *Attestation) GetHeight() uint64 {
	if m != nil {
		return m.Height
	}
	return 0
}

// EthereumInfo defines the latest observed ethereum block height and the
// corresponding timestamp value in nanoseconds.
type EthereumInfo struct {
	EthereumHeight uint64 `protobuf:"varint,1,opt,name=ethereum_height,json=ethereumHeight,proto3" json:"ethereum_height,omitempty"`
	CosmosHeight   uint64 `protobuf:"varint,2,opt,name=cosmos_height,json=cosmosHeight,proto3" json:"cosmos_height,omitempty"`
}

func (m *EthereumInfo) Reset()         { *m = EthereumInfo{} }
func (m *EthereumInfo) String() string { return proto.CompactTextString(m) }
func (*EthereumInfo) ProtoMessage()    {}
func (*EthereumInfo) Descriptor() ([]byte, []int) {
	return fileDescriptor_1715a041eadeb531, []int{1}
}
func (m *EthereumInfo) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *EthereumInfo) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_EthereumInfo.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *EthereumInfo) XXX_Merge(src proto.Message) {
	xxx_messageInfo_EthereumInfo.Merge(m, src)
}
func (m *EthereumInfo) XXX_Size() int {
	return m.Size()
}
func (m *EthereumInfo) XXX_DiscardUnknown() {
	xxx_messageInfo_EthereumInfo.DiscardUnknown(m)
}

var xxx_messageInfo_EthereumInfo proto.InternalMessageInfo

func (m *EthereumInfo) GetEthereumHeight() uint64 {
	if m != nil {
		return m.EthereumHeight
	}
	return 0
}

func (m *EthereumInfo) GetCosmosHeight() uint64 {
	if m != nil {
		return m.CosmosHeight
	}
	return 0
}

// EthSigner represents a cosmos validator with its corresponding bridge operator
// ethereum address and its staking consensus power.
type EthSigner struct {
	Power           int64  `protobuf:"varint,1,opt,name=power,proto3" json:"power,omitempty"`
	EthereumAddress string `protobuf:"bytes,2,opt,name=ethereum_address,json=ethereumAddress,proto3" json:"ethereum_address,omitempty"`
}

func (m *EthSigner) Reset()         { *m = EthSigner{} }
func (m *EthSigner) String() string { return proto.CompactTextString(m) }
func (*EthSigner) ProtoMessage()    {}
func (*EthSigner) Descriptor() ([]byte, []int) {
	return fileDescriptor_1715a041eadeb531, []int{2}
}
func (m *EthSigner) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *EthSigner) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_EthSigner.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *EthSigner) XXX_Merge(src proto.Message) {
	xxx_messageInfo_EthSigner.Merge(m, src)
}
func (m *EthSigner) XXX_Size() int {
	return m.Size()
}
func (m *EthSigner) XXX_DiscardUnknown() {
	xxx_messageInfo_EthSigner.DiscardUnknown(m)
}

var xxx_messageInfo_EthSigner proto.InternalMessageInfo

func (m *EthSigner) GetPower() int64 {
	if m != nil {
		return m.Power
	}
	return 0
}

func (m *EthSigner) GetEthereumAddress() string {
	if m != nil {
		return m.EthereumAddress
	}
	return ""
}

// EthSignerSet is the Ethereum Bridge multisig set that relays transactions
// the two chains. The staking validators keep ethereum keys which are used to
// check signatures on Ethereum in order to get significant gas savings.
type EthSignerSet struct {
	Nonce   uint64      `protobuf:"varint,1,opt,name=nonce,proto3" json:"nonce,omitempty"`
	Signers []EthSigner `protobuf:"bytes,2,rep,name=signers,proto3" json:"signers"`
}

func (m *EthSignerSet) Reset()         { *m = EthSignerSet{} }
func (m *EthSignerSet) String() string { return proto.CompactTextString(m) }
func (*EthSignerSet) ProtoMessage()    {}
func (*EthSignerSet) Descriptor() ([]byte, []int) {
	return fileDescriptor_1715a041eadeb531, []int{3}
}
func (m *EthSignerSet) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *EthSignerSet) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_EthSignerSet.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *EthSignerSet) XXX_Merge(src proto.Message) {
	xxx_messageInfo_EthSignerSet.Merge(m, src)
}
func (m *EthSignerSet) XXX_Size() int {
	return m.Size()
}
func (m *EthSignerSet) XXX_DiscardUnknown() {
	xxx_messageInfo_EthSignerSet.DiscardUnknown(m)
}

var xxx_messageInfo_EthSignerSet proto.InternalMessageInfo

func (m *EthSignerSet) GetNonce() uint64 {
	if m != nil {
		return m.Nonce
	}
	return 0
}

func (m *EthSignerSet) GetSigners() []EthSigner {
	if m != nil {
		return m.Signers
	}
	return nil
}

// BatchTx represents a batch of transactions going from Cosmos to Ethereum. Batch
// txs are are identified by a unique hash and the token contract that is shared by
// all the transfer
type BatchTx struct {
	Nonce         uint64                                                 `protobuf:"varint,1,opt,name=nonce,proto3" json:"nonce,omitempty"`
	Timeout       uint64                                                 `protobuf:"varint,2,opt,name=timeout,proto3" json:"timeout,omitempty"`
	Transactions  []github_com_tendermint_tendermint_libs_bytes.HexBytes `protobuf:"bytes,3,rep,name=transactions,proto3,casttype=github.com/tendermint/tendermint/libs/bytes.HexBytes" json:"transactions,omitempty"`
	TokenContract string                                                 `protobuf:"bytes,4,opt,name=token_contract,json=tokenContract,proto3" json:"token_contract,omitempty"`
	EthereumBlock uint64                                                 `protobuf:"varint,5,opt,name=ethereum_block,json=ethereumBlock,proto3" json:"ethereum_block,omitempty"`
}

func (m *BatchTx) Reset()         { *m = BatchTx{} }
func (m *BatchTx) String() string { return proto.CompactTextString(m) }
func (*BatchTx) ProtoMessage()    {}
func (*BatchTx) Descriptor() ([]byte, []int) {
	return fileDescriptor_1715a041eadeb531, []int{4}
}
func (m *BatchTx) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *BatchTx) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_BatchTx.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *BatchTx) XXX_Merge(src proto.Message) {
	xxx_messageInfo_BatchTx.Merge(m, src)
}
func (m *BatchTx) XXX_Size() int {
	return m.Size()
}
func (m *BatchTx) XXX_DiscardUnknown() {
	xxx_messageInfo_BatchTx.DiscardUnknown(m)
}

var xxx_messageInfo_BatchTx proto.InternalMessageInfo

func (m *BatchTx) GetNonce() uint64 {
	if m != nil {
		return m.Nonce
	}
	return 0
}

func (m *BatchTx) GetTimeout() uint64 {
	if m != nil {
		return m.Timeout
	}
	return 0
}

func (m *BatchTx) GetTransactions() []github_com_tendermint_tendermint_libs_bytes.HexBytes {
	if m != nil {
		return m.Transactions
	}
	return nil
}

func (m *BatchTx) GetTokenContract() string {
	if m != nil {
		return m.TokenContract
	}
	return ""
}

func (m *BatchTx) GetEthereumBlock() uint64 {
	if m != nil {
		return m.EthereumBlock
	}
	return 0
}

// TransferTx represents an individual transfer from Cosmos to Ethereum
type TransferTx struct {
	Id                uint64      `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
	Sender            string      `protobuf:"bytes,2,opt,name=sender,proto3" json:"sender,omitempty"`
	EthereumRecipient string      `protobuf:"bytes,3,opt,name=ethereum_recipient,json=ethereumRecipient,proto3" json:"ethereum_recipient,omitempty"`
	Erc20Token        types1.Coin `protobuf:"bytes,4,opt,name=erc20_token,json=erc20Token,proto3" json:"erc20_token"`
	Erc20Fee          types1.Coin `protobuf:"bytes,5,opt,name=erc20_fee,json=erc20Fee,proto3" json:"erc20_fee"`
}

func (m *TransferTx) Reset()         { *m = TransferTx{} }
func (m *TransferTx) String() string { return proto.CompactTextString(m) }
func (*TransferTx) ProtoMessage()    {}
func (*TransferTx) Descriptor() ([]byte, []int) {
	return fileDescriptor_1715a041eadeb531, []int{5}
}
func (m *TransferTx) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *TransferTx) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_TransferTx.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *TransferTx) XXX_Merge(src proto.Message) {
	xxx_messageInfo_TransferTx.Merge(m, src)
}
func (m *TransferTx) XXX_Size() int {
	return m.Size()
}
func (m *TransferTx) XXX_DiscardUnknown() {
	xxx_messageInfo_TransferTx.DiscardUnknown(m)
}

var xxx_messageInfo_TransferTx proto.InternalMessageInfo

func (m *TransferTx) GetId() uint64 {
	if m != nil {
		return m.Id
	}
	return 0
}

func (m *TransferTx) GetSender() string {
	if m != nil {
		return m.Sender
	}
	return ""
}

func (m *TransferTx) GetEthereumRecipient() string {
	if m != nil {
		return m.EthereumRecipient
	}
	return ""
}

func (m *TransferTx) GetErc20Token() types1.Coin {
	if m != nil {
		return m.Erc20Token
	}
	return types1.Coin{}
}

func (m *TransferTx) GetErc20Fee() types1.Coin {
	if m != nil {
		return m.Erc20Fee
	}
	return types1.Coin{}
}

// LogicCallTx represents an individual arbitratry logic call transaction from
// Cosmos to Ethereum.
type LogicCallTx struct {
	InvalidationNonce    uint64                                               `protobuf:"varint,1,opt,name=invalidation_nonce,json=invalidationNonce,proto3" json:"invalidation_nonce,omitempty"`
	InvalidationId       github_com_tendermint_tendermint_libs_bytes.HexBytes `protobuf:"bytes,2,opt,name=invalidation_id,json=invalidationId,proto3,casttype=github.com/tendermint/tendermint/libs/bytes.HexBytes" json:"invalidation_id,omitempty"`
	LogicContractAddress string                                               `protobuf:"bytes,3,opt,name=logic_contract_address,json=logicContractAddress,proto3" json:"logic_contract_address,omitempty"`
	Payload              []byte                                               `protobuf:"bytes,4,opt,name=payload,proto3" json:"payload,omitempty"`
	Timeout              uint64                                               `protobuf:"varint,5,opt,name=timeout,proto3" json:"timeout,omitempty"`
	Tokens               []types1.Coin                                        `protobuf:"bytes,6,rep,name=tokens,proto3" json:"tokens"`
	Fees                 []types1.Coin                                        `protobuf:"bytes,7,rep,name=fees,proto3" json:"fees"`
}

func (m *LogicCallTx) Reset()         { *m = LogicCallTx{} }
func (m *LogicCallTx) String() string { return proto.CompactTextString(m) }
func (*LogicCallTx) ProtoMessage()    {}
func (*LogicCallTx) Descriptor() ([]byte, []int) {
	return fileDescriptor_1715a041eadeb531, []int{6}
}
func (m *LogicCallTx) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *LogicCallTx) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_LogicCallTx.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *LogicCallTx) XXX_Merge(src proto.Message) {
	xxx_messageInfo_LogicCallTx.Merge(m, src)
}
func (m *LogicCallTx) XXX_Size() int {
	return m.Size()
}
func (m *LogicCallTx) XXX_DiscardUnknown() {
	xxx_messageInfo_LogicCallTx.DiscardUnknown(m)
}

var xxx_messageInfo_LogicCallTx proto.InternalMessageInfo

func (m *LogicCallTx) GetInvalidationNonce() uint64 {
	if m != nil {
		return m.InvalidationNonce
	}
	return 0
}

func (m *LogicCallTx) GetInvalidationId() github_com_tendermint_tendermint_libs_bytes.HexBytes {
	if m != nil {
		return m.InvalidationId
	}
	return nil
}

func (m *LogicCallTx) GetLogicContractAddress() string {
	if m != nil {
		return m.LogicContractAddress
	}
	return ""
}

func (m *LogicCallTx) GetPayload() []byte {
	if m != nil {
		return m.Payload
	}
	return nil
}

func (m *LogicCallTx) GetTimeout() uint64 {
	if m != nil {
		return m.Timeout
	}
	return 0
}

func (m *LogicCallTx) GetTokens() []types1.Coin {
	if m != nil {
		return m.Tokens
	}
	return nil
}

func (m *LogicCallTx) GetFees() []types1.Coin {
	if m != nil {
		return m.Fees
	}
	return nil
}

// TransactionIDs defines a protobuf message for storing transfer tx ids.
type TransactionIDs struct {
	Ids []github_com_tendermint_tendermint_libs_bytes.HexBytes `protobuf:"bytes,1,rep,name=ids,proto3,casttype=github.com/tendermint/tendermint/libs/bytes.HexBytes" json:"ids,omitempty"`
}

func (m *TransactionIDs) Reset()         { *m = TransactionIDs{} }
func (m *TransactionIDs) String() string { return proto.CompactTextString(m) }
func (*TransactionIDs) ProtoMessage()    {}
func (*TransactionIDs) Descriptor() ([]byte, []int) {
	return fileDescriptor_1715a041eadeb531, []int{7}
}
func (m *TransactionIDs) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *TransactionIDs) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_TransactionIDs.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *TransactionIDs) XXX_Merge(src proto.Message) {
	xxx_messageInfo_TransactionIDs.Merge(m, src)
}
func (m *TransactionIDs) XXX_Size() int {
	return m.Size()
}
func (m *TransactionIDs) XXX_DiscardUnknown() {
	xxx_messageInfo_TransactionIDs.DiscardUnknown(m)
}

var xxx_messageInfo_TransactionIDs proto.InternalMessageInfo

func (m *TransactionIDs) GetIds() []github_com_tendermint_tendermint_libs_bytes.HexBytes {
	if m != nil {
		return m.Ids
	}
	return nil
}

func init() {
	proto.RegisterType((*Attestation)(nil), "gravity.v1.Attestation")
	proto.RegisterType((*EthereumInfo)(nil), "gravity.v1.EthereumInfo")
	proto.RegisterType((*EthSigner)(nil), "gravity.v1.EthSigner")
	proto.RegisterType((*EthSignerSet)(nil), "gravity.v1.EthSignerSet")
	proto.RegisterType((*BatchTx)(nil), "gravity.v1.BatchTx")
	proto.RegisterType((*TransferTx)(nil), "gravity.v1.TransferTx")
	proto.RegisterType((*LogicCallTx)(nil), "gravity.v1.LogicCallTx")
	proto.RegisterType((*TransactionIDs)(nil), "gravity.v1.TransactionIDs")
}

func init() { proto.RegisterFile("gravity/v1/gravity.proto", fileDescriptor_1715a041eadeb531) }

var fileDescriptor_1715a041eadeb531 = []byte{
	// 803 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xac, 0x54, 0xcb, 0x8e, 0xe3, 0x44,
	0x14, 0x6d, 0xb7, 0xbb, 0x3b, 0xa4, 0xf2, 0x18, 0xba, 0x14, 0x46, 0xee, 0x59, 0x24, 0x91, 0x11,
	0x22, 0x2c, 0x62, 0x4f, 0xc2, 0x48, 0xb0, 0x00, 0x89, 0x76, 0x68, 0x34, 0x8d, 0x46, 0x48, 0x78,
	0xb2, 0x42, 0x2d, 0x45, 0x7e, 0xdc, 0x38, 0xa5, 0x76, 0xaa, 0x22, 0x57, 0x25, 0x24, 0x7c, 0x05,
	0xdf, 0xc1, 0x9a, 0x8f, 0x18, 0xb1, 0x61, 0x96, 0xac, 0x06, 0xd4, 0x11, 0x3f, 0xc1, 0x0a, 0xd5,
	0xc3, 0x9e, 0x34, 0x08, 0x84, 0x34, 0xac, 0x5c, 0xf7, 0x71, 0x4e, 0x9d, 0xba, 0x0f, 0x23, 0x27,
	0x2b, 0xa2, 0x0d, 0x11, 0x3b, 0x7f, 0x33, 0xf2, 0xcd, 0xd1, 0x5b, 0x15, 0x4c, 0x30, 0x8c, 0x4a,
	0x73, 0x33, 0x7a, 0x74, 0x91, 0x30, 0xbe, 0x64, 0x7c, 0xa6, 0x22, 0xbe, 0x36, 0x74, 0xda, 0xa3,
	0x5e, 0xc6, 0x58, 0x96, 0x83, 0xaf, 0xac, 0x78, 0x3d, 0xf7, 0x05, 0x59, 0x02, 0x17, 0xd1, 0x72,
	0x65, 0x12, 0x3a, 0x19, 0xcb, 0x98, 0x06, 0xca, 0x93, 0xf1, 0x76, 0x35, 0x89, 0x1f, 0x47, 0x1c,
	0xfc, 0xcd, 0x28, 0x06, 0x11, 0x8d, 0xfc, 0x84, 0x11, 0x6a, 0xe2, 0x17, 0x7f, 0xa5, 0x8d, 0xa8,
	0x11, 0xe6, 0x7e, 0x87, 0x1a, 0x97, 0x42, 0xc8, 0x3b, 0x04, 0x61, 0x14, 0x7f, 0x8a, 0x4e, 0x61,
	0x03, 0x54, 0x38, 0x56, 0xdf, 0x1a, 0x34, 0xc6, 0x1d, 0x4f, 0x23, 0xbd, 0x12, 0xe9, 0x5d, 0xd2,
	0x5d, 0x70, 0xfe, 0xd3, 0x8f, 0xc3, 0xd6, 0x95, 0x58, 0x40, 0x01, 0xeb, 0xe5, 0x95, 0x4c, 0x0f,
	0x35, 0x0a, 0x77, 0xd0, 0xe9, 0x86, 0x09, 0xe0, 0xce, 0x71, 0xdf, 0x1e, 0xd4, 0x43, 0x6d, 0xe0,
	0x87, 0xe8, 0x6c, 0x01, 0x24, 0x5b, 0x08, 0xc7, 0xee, 0x5b, 0x83, 0x93, 0xd0, 0x58, 0xee, 0x0d,
	0x6a, 0x96, 0x2c, 0xd7, 0x74, 0xce, 0xf0, 0xfb, 0xe8, 0x01, 0x18, 0x7b, 0x66, 0x00, 0x96, 0x02,
	0xb4, 0x4b, 0xf7, 0x53, 0xe5, 0xc5, 0xef, 0xa2, 0x96, 0xa9, 0xa1, 0x49, 0x3b, 0x56, 0x69, 0x4d,
	0xed, 0xd4, 0x49, 0xee, 0x33, 0x54, 0xbf, 0x12, 0x8b, 0xe7, 0x24, 0xa3, 0x50, 0x48, 0x61, 0x2b,
	0xf6, 0x2d, 0x14, 0x8a, 0xd0, 0x0e, 0xb5, 0x81, 0x3f, 0x40, 0x6f, 0x57, 0x17, 0x46, 0x69, 0x5a,
	0x00, 0xe7, 0x8a, 0xaa, 0x1e, 0x56, 0x42, 0x2e, 0xb5, 0xdb, 0x25, 0x4a, 0xab, 0x66, 0x7b, 0x0e,
	0xea, 0xa5, 0x94, 0xd1, 0x04, 0x8c, 0x42, 0x6d, 0xe0, 0x09, 0xaa, 0x71, 0x95, 0xa2, 0x2b, 0xd0,
	0x18, 0xbf, 0xe3, 0xbd, 0x6e, 0xbc, 0x57, 0x11, 0x04, 0xf8, 0xc5, 0xab, 0xde, 0xd1, 0x0f, 0xbf,
	0xf6, 0x50, 0xe5, 0xe2, 0x61, 0x89, 0x74, 0x7f, 0xb7, 0x50, 0x2d, 0x88, 0x44, 0xb2, 0x98, 0x6e,
	0xff, 0xe1, 0x1a, 0x07, 0xd5, 0xe4, 0x60, 0xb0, 0x75, 0xf9, 0xf2, 0xd2, 0xc4, 0x37, 0xa8, 0x29,
	0x8a, 0x88, 0xf2, 0x28, 0x91, 0xed, 0xe4, 0x8e, 0xdd, 0xb7, 0x07, 0xcd, 0xe0, 0xe3, 0x3f, 0x5e,
	0xf5, 0x9e, 0x64, 0x44, 0x2c, 0xd6, 0xb1, 0x97, 0xb0, 0xa5, 0x2f, 0x80, 0xa6, 0x50, 0x2c, 0x09,
	0x15, 0x87, 0xc7, 0x9c, 0xc4, 0xdc, 0x8f, 0x77, 0x02, 0xb8, 0xf7, 0x14, 0xb6, 0x81, 0x3c, 0x84,
	0xf7, 0xd8, 0xf0, 0x7b, 0xa8, 0x2d, 0xd8, 0x2d, 0xd0, 0x59, 0xc2, 0xa8, 0x28, 0xa2, 0x44, 0x38,
	0x27, 0xaa, 0x5a, 0x2d, 0xe5, 0x9d, 0x18, 0xa7, 0x4c, 0xab, 0xca, 0x1a, 0xe7, 0x2c, 0xb9, 0x75,
	0x4e, 0x95, 0xca, 0x56, 0xe9, 0x0d, 0xa4, 0xd3, 0xdd, 0x5b, 0x08, 0x4d, 0x25, 0xfd, 0x1c, 0x8a,
	0xe9, 0x16, 0xb7, 0xd1, 0x31, 0x49, 0xcd, 0x3b, 0x8f, 0x49, 0x2a, 0xa7, 0x86, 0x2b, 0x71, 0xa6,
	0x25, 0xc6, 0xc2, 0x43, 0x84, 0x2b, 0xf6, 0x02, 0x12, 0xb2, 0x22, 0x72, 0x5e, 0x6d, 0x95, 0x73,
	0x5e, 0x46, 0xc2, 0x32, 0x80, 0x3f, 0x43, 0x0d, 0x28, 0x92, 0xf1, 0xe3, 0x99, 0xd2, 0xa8, 0x04,
	0x37, 0xc6, 0x17, 0x9e, 0x59, 0x3b, 0xb9, 0x31, 0x9e, 0xd9, 0x18, 0x6f, 0xc2, 0x08, 0x0d, 0x4e,
	0x64, 0x6b, 0x42, 0xa4, 0x30, 0x53, 0x09, 0xc1, 0x9f, 0xa0, 0xba, 0x66, 0x98, 0x03, 0xa8, 0x97,
	0xfc, 0x07, 0xfc, 0x5b, 0x0a, 0xf1, 0x05, 0x80, 0xfb, 0xb3, 0x8d, 0x1a, 0xcf, 0x58, 0x46, 0x92,
	0x49, 0x94, 0xe7, 0xd3, 0xad, 0x94, 0x4f, 0xe8, 0x26, 0xca, 0x49, 0xaa, 0x36, 0x6e, 0x76, 0xd8,
	0xde, 0xf3, 0xc3, 0xc8, 0x57, 0xaa, 0xd5, 0x11, 0x7a, 0x70, 0x2f, 0x9d, 0xa4, 0xaa, 0x1c, 0x6f,
	0xd2, 0xd3, 0xf6, 0x21, 0xe1, 0x75, 0x8a, 0x9f, 0xa0, 0x87, 0xb9, 0x14, 0x58, 0x75, 0xb5, 0xda,
	0x05, 0x5d, 0xd4, 0x8e, 0x8a, 0x96, 0xdd, 0x35, 0x0b, 0x21, 0x67, 0x70, 0x15, 0xed, 0x72, 0x16,
	0xa5, 0xaa, 0xa6, 0xcd, 0xb0, 0x34, 0x0f, 0xa7, 0xf3, 0xf4, 0xfe, 0x74, 0x26, 0xe8, 0x4c, 0x75,
	0x81, 0x3b, 0x67, 0x6a, 0x3b, 0xfe, 0xa5, 0x8c, 0x8f, 0xcd, 0x86, 0x0c, 0x0e, 0x9e, 0x68, 0xfe,
	0x72, 0xfa, 0x33, 0xe4, 0xe9, 0xad, 0x2f, 0x76, 0x2b, 0xe0, 0x0a, 0xc0, 0x43, 0x43, 0x8d, 0x67,
	0xe8, 0x64, 0x0e, 0xc0, 0x9d, 0xda, 0xff, 0x7f, 0x85, 0x22, 0x76, 0x6f, 0x50, 0x7b, 0xfa, 0x7a,
	0x2b, 0xae, 0x3f, 0xe7, 0xf8, 0x4b, 0x64, 0x93, 0x94, 0x3b, 0xd6, 0x1b, 0x2e, 0x9b, 0x24, 0x09,
	0xbe, 0x7e, 0x71, 0xd7, 0xb5, 0x5e, 0xde, 0x75, 0xad, 0xdf, 0xee, 0xba, 0xd6, 0xf7, 0xfb, 0xee,
	0xd1, 0xcb, 0x7d, 0xf7, 0xe8, 0x97, 0x7d, 0xf7, 0xe8, 0x9b, 0x8f, 0xfe, 0xae, 0xd3, 0xfc, 0x5c,
	0x86, 0x71, 0x41, 0xd2, 0x0c, 0xfc, 0x25, 0x4b, 0xd7, 0x39, 0xf8, 0xdb, 0xd2, 0xaf, 0xc5, 0xc7,
	0x67, 0xea, 0xef, 0xfd, 0xe1, 0x9f, 0x01, 0x00, 0x00, 0xff, 0xff, 0x53, 0x8e, 0x91, 0x6d, 0x9f,
	0x06, 0x00, 0x00,
}

func (m *Attestation) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Attestation) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *Attestation) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Height != 0 {
		i = encodeVarintGravity(dAtA, i, uint64(m.Height))
		i--
		dAtA[i] = 0x18
	}
	if len(m.Votes) > 0 {
		for iNdEx := len(m.Votes) - 1; iNdEx >= 0; iNdEx-- {
			i -= len(m.Votes[iNdEx])
			copy(dAtA[i:], m.Votes[iNdEx])
			i = encodeVarintGravity(dAtA, i, uint64(len(m.Votes[iNdEx])))
			i--
			dAtA[i] = 0x12
		}
	}
	if m.Event != nil {
		{
			size, err := m.Event.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintGravity(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *EthereumInfo) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *EthereumInfo) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *EthereumInfo) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.CosmosHeight != 0 {
		i = encodeVarintGravity(dAtA, i, uint64(m.CosmosHeight))
		i--
		dAtA[i] = 0x10
	}
	if m.EthereumHeight != 0 {
		i = encodeVarintGravity(dAtA, i, uint64(m.EthereumHeight))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *EthSigner) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *EthSigner) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *EthSigner) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.EthereumAddress) > 0 {
		i -= len(m.EthereumAddress)
		copy(dAtA[i:], m.EthereumAddress)
		i = encodeVarintGravity(dAtA, i, uint64(len(m.EthereumAddress)))
		i--
		dAtA[i] = 0x12
	}
	if m.Power != 0 {
		i = encodeVarintGravity(dAtA, i, uint64(m.Power))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *EthSignerSet) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *EthSignerSet) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *EthSignerSet) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Signers) > 0 {
		for iNdEx := len(m.Signers) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.Signers[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintGravity(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x12
		}
	}
	if m.Nonce != 0 {
		i = encodeVarintGravity(dAtA, i, uint64(m.Nonce))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *BatchTx) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *BatchTx) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *BatchTx) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.EthereumBlock != 0 {
		i = encodeVarintGravity(dAtA, i, uint64(m.EthereumBlock))
		i--
		dAtA[i] = 0x28
	}
	if len(m.TokenContract) > 0 {
		i -= len(m.TokenContract)
		copy(dAtA[i:], m.TokenContract)
		i = encodeVarintGravity(dAtA, i, uint64(len(m.TokenContract)))
		i--
		dAtA[i] = 0x22
	}
	if len(m.Transactions) > 0 {
		for iNdEx := len(m.Transactions) - 1; iNdEx >= 0; iNdEx-- {
			i -= len(m.Transactions[iNdEx])
			copy(dAtA[i:], m.Transactions[iNdEx])
			i = encodeVarintGravity(dAtA, i, uint64(len(m.Transactions[iNdEx])))
			i--
			dAtA[i] = 0x1a
		}
	}
	if m.Timeout != 0 {
		i = encodeVarintGravity(dAtA, i, uint64(m.Timeout))
		i--
		dAtA[i] = 0x10
	}
	if m.Nonce != 0 {
		i = encodeVarintGravity(dAtA, i, uint64(m.Nonce))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *TransferTx) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *TransferTx) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *TransferTx) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	{
		size, err := m.Erc20Fee.MarshalToSizedBuffer(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = encodeVarintGravity(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x2a
	{
		size, err := m.Erc20Token.MarshalToSizedBuffer(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = encodeVarintGravity(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x22
	if len(m.EthereumRecipient) > 0 {
		i -= len(m.EthereumRecipient)
		copy(dAtA[i:], m.EthereumRecipient)
		i = encodeVarintGravity(dAtA, i, uint64(len(m.EthereumRecipient)))
		i--
		dAtA[i] = 0x1a
	}
	if len(m.Sender) > 0 {
		i -= len(m.Sender)
		copy(dAtA[i:], m.Sender)
		i = encodeVarintGravity(dAtA, i, uint64(len(m.Sender)))
		i--
		dAtA[i] = 0x12
	}
	if m.Id != 0 {
		i = encodeVarintGravity(dAtA, i, uint64(m.Id))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *LogicCallTx) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *LogicCallTx) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *LogicCallTx) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Fees) > 0 {
		for iNdEx := len(m.Fees) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.Fees[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintGravity(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x3a
		}
	}
	if len(m.Tokens) > 0 {
		for iNdEx := len(m.Tokens) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.Tokens[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintGravity(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x32
		}
	}
	if m.Timeout != 0 {
		i = encodeVarintGravity(dAtA, i, uint64(m.Timeout))
		i--
		dAtA[i] = 0x28
	}
	if len(m.Payload) > 0 {
		i -= len(m.Payload)
		copy(dAtA[i:], m.Payload)
		i = encodeVarintGravity(dAtA, i, uint64(len(m.Payload)))
		i--
		dAtA[i] = 0x22
	}
	if len(m.LogicContractAddress) > 0 {
		i -= len(m.LogicContractAddress)
		copy(dAtA[i:], m.LogicContractAddress)
		i = encodeVarintGravity(dAtA, i, uint64(len(m.LogicContractAddress)))
		i--
		dAtA[i] = 0x1a
	}
	if len(m.InvalidationId) > 0 {
		i -= len(m.InvalidationId)
		copy(dAtA[i:], m.InvalidationId)
		i = encodeVarintGravity(dAtA, i, uint64(len(m.InvalidationId)))
		i--
		dAtA[i] = 0x12
	}
	if m.InvalidationNonce != 0 {
		i = encodeVarintGravity(dAtA, i, uint64(m.InvalidationNonce))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *TransactionIDs) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *TransactionIDs) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *TransactionIDs) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Ids) > 0 {
		for iNdEx := len(m.Ids) - 1; iNdEx >= 0; iNdEx-- {
			i -= len(m.Ids[iNdEx])
			copy(dAtA[i:], m.Ids[iNdEx])
			i = encodeVarintGravity(dAtA, i, uint64(len(m.Ids[iNdEx])))
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func encodeVarintGravity(dAtA []byte, offset int, v uint64) int {
	offset -= sovGravity(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *Attestation) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Event != nil {
		l = m.Event.Size()
		n += 1 + l + sovGravity(uint64(l))
	}
	if len(m.Votes) > 0 {
		for _, s := range m.Votes {
			l = len(s)
			n += 1 + l + sovGravity(uint64(l))
		}
	}
	if m.Height != 0 {
		n += 1 + sovGravity(uint64(m.Height))
	}
	return n
}

func (m *EthereumInfo) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.EthereumHeight != 0 {
		n += 1 + sovGravity(uint64(m.EthereumHeight))
	}
	if m.CosmosHeight != 0 {
		n += 1 + sovGravity(uint64(m.CosmosHeight))
	}
	return n
}

func (m *EthSigner) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Power != 0 {
		n += 1 + sovGravity(uint64(m.Power))
	}
	l = len(m.EthereumAddress)
	if l > 0 {
		n += 1 + l + sovGravity(uint64(l))
	}
	return n
}

func (m *EthSignerSet) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Nonce != 0 {
		n += 1 + sovGravity(uint64(m.Nonce))
	}
	if len(m.Signers) > 0 {
		for _, e := range m.Signers {
			l = e.Size()
			n += 1 + l + sovGravity(uint64(l))
		}
	}
	return n
}

func (m *BatchTx) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Nonce != 0 {
		n += 1 + sovGravity(uint64(m.Nonce))
	}
	if m.Timeout != 0 {
		n += 1 + sovGravity(uint64(m.Timeout))
	}
	if len(m.Transactions) > 0 {
		for _, b := range m.Transactions {
			l = len(b)
			n += 1 + l + sovGravity(uint64(l))
		}
	}
	l = len(m.TokenContract)
	if l > 0 {
		n += 1 + l + sovGravity(uint64(l))
	}
	if m.EthereumBlock != 0 {
		n += 1 + sovGravity(uint64(m.EthereumBlock))
	}
	return n
}

func (m *TransferTx) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Id != 0 {
		n += 1 + sovGravity(uint64(m.Id))
	}
	l = len(m.Sender)
	if l > 0 {
		n += 1 + l + sovGravity(uint64(l))
	}
	l = len(m.EthereumRecipient)
	if l > 0 {
		n += 1 + l + sovGravity(uint64(l))
	}
	l = m.Erc20Token.Size()
	n += 1 + l + sovGravity(uint64(l))
	l = m.Erc20Fee.Size()
	n += 1 + l + sovGravity(uint64(l))
	return n
}

func (m *LogicCallTx) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.InvalidationNonce != 0 {
		n += 1 + sovGravity(uint64(m.InvalidationNonce))
	}
	l = len(m.InvalidationId)
	if l > 0 {
		n += 1 + l + sovGravity(uint64(l))
	}
	l = len(m.LogicContractAddress)
	if l > 0 {
		n += 1 + l + sovGravity(uint64(l))
	}
	l = len(m.Payload)
	if l > 0 {
		n += 1 + l + sovGravity(uint64(l))
	}
	if m.Timeout != 0 {
		n += 1 + sovGravity(uint64(m.Timeout))
	}
	if len(m.Tokens) > 0 {
		for _, e := range m.Tokens {
			l = e.Size()
			n += 1 + l + sovGravity(uint64(l))
		}
	}
	if len(m.Fees) > 0 {
		for _, e := range m.Fees {
			l = e.Size()
			n += 1 + l + sovGravity(uint64(l))
		}
	}
	return n
}

func (m *TransactionIDs) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.Ids) > 0 {
		for _, b := range m.Ids {
			l = len(b)
			n += 1 + l + sovGravity(uint64(l))
		}
	}
	return n
}

func sovGravity(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozGravity(x uint64) (n int) {
	return sovGravity(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *Attestation) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowGravity
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Attestation: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Attestation: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Event", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGravity
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthGravity
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthGravity
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Event == nil {
				m.Event = &types.Any{}
			}
			if err := m.Event.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Votes", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGravity
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthGravity
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthGravity
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Votes = append(m.Votes, string(dAtA[iNdEx:postIndex]))
			iNdEx = postIndex
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Height", wireType)
			}
			m.Height = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGravity
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Height |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipGravity(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthGravity
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *EthereumInfo) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowGravity
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: EthereumInfo: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: EthereumInfo: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field EthereumHeight", wireType)
			}
			m.EthereumHeight = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGravity
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.EthereumHeight |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field CosmosHeight", wireType)
			}
			m.CosmosHeight = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGravity
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.CosmosHeight |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipGravity(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthGravity
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *EthSigner) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowGravity
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: EthSigner: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: EthSigner: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Power", wireType)
			}
			m.Power = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGravity
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Power |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field EthereumAddress", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGravity
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthGravity
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthGravity
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.EthereumAddress = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipGravity(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthGravity
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *EthSignerSet) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowGravity
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: EthSignerSet: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: EthSignerSet: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Nonce", wireType)
			}
			m.Nonce = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGravity
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Nonce |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Signers", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGravity
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthGravity
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthGravity
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Signers = append(m.Signers, EthSigner{})
			if err := m.Signers[len(m.Signers)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipGravity(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthGravity
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *BatchTx) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowGravity
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: BatchTx: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: BatchTx: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Nonce", wireType)
			}
			m.Nonce = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGravity
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Nonce |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Timeout", wireType)
			}
			m.Timeout = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGravity
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Timeout |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Transactions", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGravity
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthGravity
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthGravity
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Transactions = append(m.Transactions, make([]byte, postIndex-iNdEx))
			copy(m.Transactions[len(m.Transactions)-1], dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field TokenContract", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGravity
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthGravity
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthGravity
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.TokenContract = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 5:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field EthereumBlock", wireType)
			}
			m.EthereumBlock = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGravity
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.EthereumBlock |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipGravity(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthGravity
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *TransferTx) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowGravity
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: TransferTx: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: TransferTx: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Id", wireType)
			}
			m.Id = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGravity
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Id |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Sender", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGravity
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthGravity
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthGravity
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Sender = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field EthereumRecipient", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGravity
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthGravity
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthGravity
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.EthereumRecipient = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Erc20Token", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGravity
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthGravity
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthGravity
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.Erc20Token.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Erc20Fee", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGravity
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthGravity
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthGravity
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.Erc20Fee.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipGravity(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthGravity
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *LogicCallTx) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowGravity
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: LogicCallTx: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: LogicCallTx: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field InvalidationNonce", wireType)
			}
			m.InvalidationNonce = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGravity
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.InvalidationNonce |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field InvalidationId", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGravity
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthGravity
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthGravity
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.InvalidationId = append(m.InvalidationId[:0], dAtA[iNdEx:postIndex]...)
			if m.InvalidationId == nil {
				m.InvalidationId = []byte{}
			}
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field LogicContractAddress", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGravity
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthGravity
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthGravity
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.LogicContractAddress = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Payload", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGravity
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthGravity
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthGravity
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Payload = append(m.Payload[:0], dAtA[iNdEx:postIndex]...)
			if m.Payload == nil {
				m.Payload = []byte{}
			}
			iNdEx = postIndex
		case 5:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Timeout", wireType)
			}
			m.Timeout = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGravity
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Timeout |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Tokens", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGravity
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthGravity
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthGravity
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Tokens = append(m.Tokens, types1.Coin{})
			if err := m.Tokens[len(m.Tokens)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 7:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Fees", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGravity
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthGravity
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthGravity
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Fees = append(m.Fees, types1.Coin{})
			if err := m.Fees[len(m.Fees)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipGravity(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthGravity
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *TransactionIDs) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowGravity
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: TransactionIDs: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: TransactionIDs: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Ids", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGravity
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthGravity
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthGravity
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Ids = append(m.Ids, make([]byte, postIndex-iNdEx))
			copy(m.Ids[len(m.Ids)-1], dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipGravity(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthGravity
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipGravity(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowGravity
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowGravity
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowGravity
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthGravity
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupGravity
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthGravity
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthGravity        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowGravity          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupGravity = fmt.Errorf("proto: unexpected end of group")
)
