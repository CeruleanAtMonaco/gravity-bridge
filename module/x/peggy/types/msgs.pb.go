// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: peggy/v1/msgs.proto

package types

import (
	context "context"
	fmt "fmt"
	types1 "github.com/cosmos/cosmos-sdk/codec/types"
	types "github.com/cosmos/cosmos-sdk/types"
	_ "github.com/gogo/protobuf/gogoproto"
	grpc1 "github.com/gogo/protobuf/grpc"
	proto "github.com/gogo/protobuf/proto"
	_ "github.com/regen-network/cosmos-proto"
	_ "google.golang.org/genproto/googleapis/api/annotations"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	io "io"
	math "math"
	math_bits "math/bits"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

// MsgDelegateKey
// this message allows validators to delegate their voting responsibilities
// to a given key. This key is then used as an optional authentication method
// for sigining oracle claims
// VALIDATOR
// The validator field is a cosmosvaloper1... string (i.e. sdk.ValAddress)
// that references a validator in the active set
// ORCHESTRATOR
// The orchestrator field is a cosmos1... string  (i.e. sdk.AccAddress) that
// references the key that is being delegated to
// ETH_ADDRESS
// This is a hex encoded 0x Ethereum public key that will be used by this validator
// on Ethereum
type MsgDelegateKey struct {
	Validator    string `protobuf:"bytes,1,opt,name=validator,proto3" json:"validator,omitempty"`
	Orchestrator string `protobuf:"bytes,2,opt,name=orchestrator,proto3" json:"orchestrator,omitempty"`
	EthAddress   string `protobuf:"bytes,3,opt,name=eth_address,json=ethAddress,proto3" json:"eth_address,omitempty"`
}

func (m *MsgDelegateKey) Reset()         { *m = MsgDelegateKey{} }
func (m *MsgDelegateKey) String() string { return proto.CompactTextString(m) }
func (*MsgDelegateKey) ProtoMessage()    {}
func (*MsgDelegateKey) Descriptor() ([]byte, []int) {
	return fileDescriptor_75b6627b296db358, []int{0}
}
func (m *MsgDelegateKey) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MsgDelegateKey) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MsgDelegateKey.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MsgDelegateKey) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MsgDelegateKey.Merge(m, src)
}
func (m *MsgDelegateKey) XXX_Size() int {
	return m.Size()
}
func (m *MsgDelegateKey) XXX_DiscardUnknown() {
	xxx_messageInfo_MsgDelegateKey.DiscardUnknown(m)
}

var xxx_messageInfo_MsgDelegateKey proto.InternalMessageInfo

func (m *MsgDelegateKey) GetValidator() string {
	if m != nil {
		return m.Validator
	}
	return ""
}

func (m *MsgDelegateKey) GetOrchestrator() string {
	if m != nil {
		return m.Orchestrator
	}
	return ""
}

func (m *MsgDelegateKey) GetEthAddress() string {
	if m != nil {
		return m.EthAddress
	}
	return ""
}

type MsgDelegateKeyResponse struct {
}

func (m *MsgDelegateKeyResponse) Reset()         { *m = MsgDelegateKeyResponse{} }
func (m *MsgDelegateKeyResponse) String() string { return proto.CompactTextString(m) }
func (*MsgDelegateKeyResponse) ProtoMessage()    {}
func (*MsgDelegateKeyResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_75b6627b296db358, []int{1}
}
func (m *MsgDelegateKeyResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MsgDelegateKeyResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MsgDelegateKeyResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MsgDelegateKeyResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MsgDelegateKeyResponse.Merge(m, src)
}
func (m *MsgDelegateKeyResponse) XXX_Size() int {
	return m.Size()
}
func (m *MsgDelegateKeyResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_MsgDelegateKeyResponse.DiscardUnknown(m)
}

var xxx_messageInfo_MsgDelegateKeyResponse proto.InternalMessageInfo

// MsgSendToEth
// This is the message that a user calls when they want to bridge an asset
// it will later be removed when it is included in a batch and successfully
// submitted tokens are removed from the users balance immediately
// -------------
// AMOUNT:
// the coin to send across the bridge, note the restriction that this is a
// single coin not a set of coins that is normal in other Cosmos messages
// FEE:
// the fee paid for the bridge, distinct from the fee paid to the chain to
// actually send this message in the first place. So a successful send has
// two layers of fees for the user
type MsgSendToEth struct {
	Sender    string     `protobuf:"bytes,1,opt,name=sender,proto3" json:"sender,omitempty"`
	EthDest   string     `protobuf:"bytes,2,opt,name=eth_dest,json=ethDest,proto3" json:"eth_dest,omitempty"`
	Amount    types.Coin `protobuf:"bytes,3,opt,name=amount,proto3" json:"amount"`
	BridgeFee types.Coin `protobuf:"bytes,4,opt,name=bridge_fee,json=bridgeFee,proto3" json:"bridge_fee"`
}

func (m *MsgSendToEth) Reset()         { *m = MsgSendToEth{} }
func (m *MsgSendToEth) String() string { return proto.CompactTextString(m) }
func (*MsgSendToEth) ProtoMessage()    {}
func (*MsgSendToEth) Descriptor() ([]byte, []int) {
	return fileDescriptor_75b6627b296db358, []int{2}
}
func (m *MsgSendToEth) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MsgSendToEth) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MsgSendToEth.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MsgSendToEth) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MsgSendToEth.Merge(m, src)
}
func (m *MsgSendToEth) XXX_Size() int {
	return m.Size()
}
func (m *MsgSendToEth) XXX_DiscardUnknown() {
	xxx_messageInfo_MsgSendToEth.DiscardUnknown(m)
}

var xxx_messageInfo_MsgSendToEth proto.InternalMessageInfo

func (m *MsgSendToEth) GetSender() string {
	if m != nil {
		return m.Sender
	}
	return ""
}

func (m *MsgSendToEth) GetEthDest() string {
	if m != nil {
		return m.EthDest
	}
	return ""
}

func (m *MsgSendToEth) GetAmount() types.Coin {
	if m != nil {
		return m.Amount
	}
	return types.Coin{}
}

func (m *MsgSendToEth) GetBridgeFee() types.Coin {
	if m != nil {
		return m.BridgeFee
	}
	return types.Coin{}
}

type MsgSendToEthResponse struct {
}

func (m *MsgSendToEthResponse) Reset()         { *m = MsgSendToEthResponse{} }
func (m *MsgSendToEthResponse) String() string { return proto.CompactTextString(m) }
func (*MsgSendToEthResponse) ProtoMessage()    {}
func (*MsgSendToEthResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_75b6627b296db358, []int{3}
}
func (m *MsgSendToEthResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MsgSendToEthResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MsgSendToEthResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MsgSendToEthResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MsgSendToEthResponse.Merge(m, src)
}
func (m *MsgSendToEthResponse) XXX_Size() int {
	return m.Size()
}
func (m *MsgSendToEthResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_MsgSendToEthResponse.DiscardUnknown(m)
}

var xxx_messageInfo_MsgSendToEthResponse proto.InternalMessageInfo

// MsgRequestBatch
// this is a message anyone can send that requests a batch of transactions to
// send across the bridge be created for whatever block height this message is
// included in. This acts as a coordination point, the handler for this message
// looks at the AddToOutgoingPool tx's in the store and generates a batch, also
// available in the store tied to this message. The validators then grab this
// batch, sign it, submit the signatures with a MsgConfirmBatch before a relayer
// can finally submit the batch
// -------------
type MsgRequestBatch struct {
	Orchestrator string `protobuf:"bytes,1,opt,name=orchestrator,proto3" json:"orchestrator,omitempty"`
	Denom        string `protobuf:"bytes,2,opt,name=denom,proto3" json:"denom,omitempty"`
}

func (m *MsgRequestBatch) Reset()         { *m = MsgRequestBatch{} }
func (m *MsgRequestBatch) String() string { return proto.CompactTextString(m) }
func (*MsgRequestBatch) ProtoMessage()    {}
func (*MsgRequestBatch) Descriptor() ([]byte, []int) {
	return fileDescriptor_75b6627b296db358, []int{4}
}
func (m *MsgRequestBatch) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MsgRequestBatch) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MsgRequestBatch.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MsgRequestBatch) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MsgRequestBatch.Merge(m, src)
}
func (m *MsgRequestBatch) XXX_Size() int {
	return m.Size()
}
func (m *MsgRequestBatch) XXX_DiscardUnknown() {
	xxx_messageInfo_MsgRequestBatch.DiscardUnknown(m)
}

var xxx_messageInfo_MsgRequestBatch proto.InternalMessageInfo

func (m *MsgRequestBatch) GetOrchestrator() string {
	if m != nil {
		return m.Orchestrator
	}
	return ""
}

func (m *MsgRequestBatch) GetDenom() string {
	if m != nil {
		return m.Denom
	}
	return ""
}

type MsgRequestBatchResponse struct {
}

func (m *MsgRequestBatchResponse) Reset()         { *m = MsgRequestBatchResponse{} }
func (m *MsgRequestBatchResponse) String() string { return proto.CompactTextString(m) }
func (*MsgRequestBatchResponse) ProtoMessage()    {}
func (*MsgRequestBatchResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_75b6627b296db358, []int{5}
}
func (m *MsgRequestBatchResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MsgRequestBatchResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MsgRequestBatchResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MsgRequestBatchResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MsgRequestBatchResponse.Merge(m, src)
}
func (m *MsgRequestBatchResponse) XXX_Size() int {
	return m.Size()
}
func (m *MsgRequestBatchResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_MsgRequestBatchResponse.DiscardUnknown(m)
}

var xxx_messageInfo_MsgRequestBatchResponse proto.InternalMessageInfo

// This call allows the sender (and only the sender)
// to cancel a given MsgSendToEth and recieve a refund
// of the tokens
type MsgCancelSendToEth struct {
	TransactionId uint64 `protobuf:"varint,1,opt,name=transaction_id,json=transactionId,proto3" json:"transaction_id,omitempty"`
	Sender        string `protobuf:"bytes,2,opt,name=sender,proto3" json:"sender,omitempty"`
}

func (m *MsgCancelSendToEth) Reset()         { *m = MsgCancelSendToEth{} }
func (m *MsgCancelSendToEth) String() string { return proto.CompactTextString(m) }
func (*MsgCancelSendToEth) ProtoMessage()    {}
func (*MsgCancelSendToEth) Descriptor() ([]byte, []int) {
	return fileDescriptor_75b6627b296db358, []int{6}
}
func (m *MsgCancelSendToEth) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MsgCancelSendToEth) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MsgCancelSendToEth.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MsgCancelSendToEth) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MsgCancelSendToEth.Merge(m, src)
}
func (m *MsgCancelSendToEth) XXX_Size() int {
	return m.Size()
}
func (m *MsgCancelSendToEth) XXX_DiscardUnknown() {
	xxx_messageInfo_MsgCancelSendToEth.DiscardUnknown(m)
}

var xxx_messageInfo_MsgCancelSendToEth proto.InternalMessageInfo

func (m *MsgCancelSendToEth) GetTransactionId() uint64 {
	if m != nil {
		return m.TransactionId
	}
	return 0
}

func (m *MsgCancelSendToEth) GetSender() string {
	if m != nil {
		return m.Sender
	}
	return ""
}

type MsgCancelSendToEthResponse struct {
}

func (m *MsgCancelSendToEthResponse) Reset()         { *m = MsgCancelSendToEthResponse{} }
func (m *MsgCancelSendToEthResponse) String() string { return proto.CompactTextString(m) }
func (*MsgCancelSendToEthResponse) ProtoMessage()    {}
func (*MsgCancelSendToEthResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_75b6627b296db358, []int{7}
}
func (m *MsgCancelSendToEthResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MsgCancelSendToEthResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MsgCancelSendToEthResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MsgCancelSendToEthResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MsgCancelSendToEthResponse.Merge(m, src)
}
func (m *MsgCancelSendToEthResponse) XXX_Size() int {
	return m.Size()
}
func (m *MsgCancelSendToEthResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_MsgCancelSendToEthResponse.DiscardUnknown(m)
}

var xxx_messageInfo_MsgCancelSendToEthResponse proto.InternalMessageInfo

// MsgSubmitConfirm
type MsgSubmitConfirm struct {
	ConfirmType ConfirmType `protobuf:"varint,1,opt,name=confirm_type,json=confirmType,proto3,enum=peggy.v1.ConfirmType" json:"confirm_type,omitempty"`
	Confirm     *types1.Any `protobuf:"bytes,2,opt,name=confirm,proto3" json:"confirm,omitempty"`
	Signer      string      `protobuf:"bytes,3,opt,name=signer,proto3" json:"signer,omitempty"`
}

func (m *MsgSubmitConfirm) Reset()         { *m = MsgSubmitConfirm{} }
func (m *MsgSubmitConfirm) String() string { return proto.CompactTextString(m) }
func (*MsgSubmitConfirm) ProtoMessage()    {}
func (*MsgSubmitConfirm) Descriptor() ([]byte, []int) {
	return fileDescriptor_75b6627b296db358, []int{8}
}
func (m *MsgSubmitConfirm) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MsgSubmitConfirm) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MsgSubmitConfirm.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MsgSubmitConfirm) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MsgSubmitConfirm.Merge(m, src)
}
func (m *MsgSubmitConfirm) XXX_Size() int {
	return m.Size()
}
func (m *MsgSubmitConfirm) XXX_DiscardUnknown() {
	xxx_messageInfo_MsgSubmitConfirm.DiscardUnknown(m)
}

var xxx_messageInfo_MsgSubmitConfirm proto.InternalMessageInfo

type MsgSubmitConfirmResponse struct {
}

func (m *MsgSubmitConfirmResponse) Reset()         { *m = MsgSubmitConfirmResponse{} }
func (m *MsgSubmitConfirmResponse) String() string { return proto.CompactTextString(m) }
func (*MsgSubmitConfirmResponse) ProtoMessage()    {}
func (*MsgSubmitConfirmResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_75b6627b296db358, []int{9}
}
func (m *MsgSubmitConfirmResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MsgSubmitConfirmResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MsgSubmitConfirmResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MsgSubmitConfirmResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MsgSubmitConfirmResponse.Merge(m, src)
}
func (m *MsgSubmitConfirmResponse) XXX_Size() int {
	return m.Size()
}
func (m *MsgSubmitConfirmResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_MsgSubmitConfirmResponse.DiscardUnknown(m)
}

var xxx_messageInfo_MsgSubmitConfirmResponse proto.InternalMessageInfo

// MsgSubmitClaim
type MsgSubmitClaim struct {
	ClaimType ClaimType   `protobuf:"varint,1,opt,name=claim_type,json=claimType,proto3,enum=peggy.v1.ClaimType" json:"claim_type,omitempty"`
	Claim     *types1.Any `protobuf:"bytes,2,opt,name=claim,proto3" json:"claim,omitempty"`
	Signer    string      `protobuf:"bytes,3,opt,name=signer,proto3" json:"signer,omitempty"`
}

func (m *MsgSubmitClaim) Reset()         { *m = MsgSubmitClaim{} }
func (m *MsgSubmitClaim) String() string { return proto.CompactTextString(m) }
func (*MsgSubmitClaim) ProtoMessage()    {}
func (*MsgSubmitClaim) Descriptor() ([]byte, []int) {
	return fileDescriptor_75b6627b296db358, []int{10}
}
func (m *MsgSubmitClaim) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MsgSubmitClaim) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MsgSubmitClaim.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MsgSubmitClaim) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MsgSubmitClaim.Merge(m, src)
}
func (m *MsgSubmitClaim) XXX_Size() int {
	return m.Size()
}
func (m *MsgSubmitClaim) XXX_DiscardUnknown() {
	xxx_messageInfo_MsgSubmitClaim.DiscardUnknown(m)
}

var xxx_messageInfo_MsgSubmitClaim proto.InternalMessageInfo

type MsgSubmitClaimResponse struct {
}

func (m *MsgSubmitClaimResponse) Reset()         { *m = MsgSubmitClaimResponse{} }
func (m *MsgSubmitClaimResponse) String() string { return proto.CompactTextString(m) }
func (*MsgSubmitClaimResponse) ProtoMessage()    {}
func (*MsgSubmitClaimResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_75b6627b296db358, []int{11}
}
func (m *MsgSubmitClaimResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MsgSubmitClaimResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MsgSubmitClaimResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MsgSubmitClaimResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MsgSubmitClaimResponse.Merge(m, src)
}
func (m *MsgSubmitClaimResponse) XXX_Size() int {
	return m.Size()
}
func (m *MsgSubmitClaimResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_MsgSubmitClaimResponse.DiscardUnknown(m)
}

var xxx_messageInfo_MsgSubmitClaimResponse proto.InternalMessageInfo

func init() {
	proto.RegisterType((*MsgDelegateKey)(nil), "peggy.v1.MsgDelegateKey")
	proto.RegisterType((*MsgDelegateKeyResponse)(nil), "peggy.v1.MsgDelegateKeyResponse")
	proto.RegisterType((*MsgSendToEth)(nil), "peggy.v1.MsgSendToEth")
	proto.RegisterType((*MsgSendToEthResponse)(nil), "peggy.v1.MsgSendToEthResponse")
	proto.RegisterType((*MsgRequestBatch)(nil), "peggy.v1.MsgRequestBatch")
	proto.RegisterType((*MsgRequestBatchResponse)(nil), "peggy.v1.MsgRequestBatchResponse")
	proto.RegisterType((*MsgCancelSendToEth)(nil), "peggy.v1.MsgCancelSendToEth")
	proto.RegisterType((*MsgCancelSendToEthResponse)(nil), "peggy.v1.MsgCancelSendToEthResponse")
	proto.RegisterType((*MsgSubmitConfirm)(nil), "peggy.v1.MsgSubmitConfirm")
	proto.RegisterType((*MsgSubmitConfirmResponse)(nil), "peggy.v1.MsgSubmitConfirmResponse")
	proto.RegisterType((*MsgSubmitClaim)(nil), "peggy.v1.MsgSubmitClaim")
	proto.RegisterType((*MsgSubmitClaimResponse)(nil), "peggy.v1.MsgSubmitClaimResponse")
}

func init() { proto.RegisterFile("peggy/v1/msgs.proto", fileDescriptor_75b6627b296db358) }

var fileDescriptor_75b6627b296db358 = []byte{
	// 848 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x8c, 0x54, 0x4f, 0x6f, 0xe3, 0x44,
	0x14, 0x8f, 0xbb, 0xfd, 0xb3, 0x79, 0x69, 0xbb, 0xe0, 0x6d, 0xd3, 0xc4, 0x0a, 0xee, 0x62, 0x2d,
	0x12, 0x97, 0xda, 0x34, 0x1c, 0x40, 0x20, 0x90, 0xb6, 0xdd, 0x45, 0x82, 0x55, 0x2e, 0xe9, 0x9e,
	0xb8, 0x58, 0x63, 0xfb, 0x75, 0x6c, 0x88, 0x67, 0x82, 0x67, 0x12, 0x11, 0x71, 0xe3, 0xc4, 0x11,
	0x89, 0x2f, 0xc0, 0x9e, 0xf8, 0x02, 0x7b, 0xe2, 0x13, 0xac, 0xf6, 0xb4, 0x12, 0x17, 0x4e, 0x08,
	0xb5, 0x7c, 0x10, 0xe4, 0xf1, 0xd8, 0xb1, 0xb3, 0x69, 0xe1, 0x96, 0xf7, 0x7e, 0xcf, 0xef, 0xf7,
	0x7b, 0x2f, 0xbf, 0x37, 0x70, 0x7f, 0x8a, 0x94, 0x2e, 0xbc, 0xf9, 0xa9, 0x97, 0x0a, 0x2a, 0xdc,
	0x69, 0xc6, 0x25, 0x37, 0xef, 0xaa, 0xa4, 0x3b, 0x3f, 0xb5, 0xec, 0x90, 0x8b, 0x94, 0x0b, 0x2f,
	0x20, 0x02, 0xbd, 0xf9, 0x69, 0x80, 0x92, 0x9c, 0x7a, 0x21, 0x4f, 0x58, 0x51, 0x69, 0xf5, 0x0b,
	0xdc, 0x57, 0x91, 0x57, 0x04, 0x1a, 0x3a, 0xac, 0x3a, 0x87, 0x13, 0x92, 0xa4, 0x65, 0xba, 0xbb,
	0x4c, 0x73, 0x76, 0x99, 0x64, 0xa9, 0xce, 0x1f, 0x50, 0x4e, 0x79, 0xd1, 0x26, 0xff, 0xa5, 0xb3,
	0x03, 0xca, 0x39, 0x9d, 0xa0, 0x47, 0xa6, 0x89, 0x47, 0x18, 0xe3, 0x92, 0xc8, 0x84, 0xb3, 0xb2,
	0x57, 0x5f, 0xa3, 0x2a, 0x0a, 0x66, 0x97, 0x1e, 0x61, 0x8b, 0x02, 0x72, 0x04, 0xec, 0x8f, 0x04,
	0x7d, 0x8c, 0x13, 0xa4, 0x44, 0xe2, 0x53, 0x5c, 0x98, 0x03, 0x68, 0xcf, 0xc9, 0x24, 0x89, 0x88,
	0xe4, 0x59, 0xcf, 0x78, 0x60, 0xbc, 0xdf, 0x1e, 0x2f, 0x13, 0xa6, 0x03, 0xbb, 0x3c, 0x0b, 0x63,
	0x14, 0x32, 0x53, 0x05, 0x1b, 0xaa, 0xa0, 0x91, 0x33, 0x8f, 0xa1, 0x83, 0x32, 0xf6, 0x49, 0x14,
	0x65, 0x28, 0x44, 0xef, 0x8e, 0x2a, 0x01, 0x94, 0xf1, 0xa3, 0x22, 0xe3, 0xf4, 0xa0, 0xdb, 0x24,
	0x1d, 0xa3, 0x98, 0x72, 0x26, 0xd0, 0xf9, 0xdd, 0x80, 0xdd, 0x91, 0xa0, 0x17, 0xc8, 0xa2, 0x67,
	0xfc, 0x89, 0x8c, 0xcd, 0x2e, 0x6c, 0x0b, 0x64, 0x11, 0x96, 0x52, 0x74, 0x64, 0xf6, 0xe1, 0x6e,
	0xce, 0x11, 0xa1, 0x90, 0x5a, 0xc3, 0x0e, 0xca, 0xf8, 0x31, 0x0a, 0x69, 0x7e, 0x04, 0xdb, 0x24,
	0xe5, 0x33, 0x26, 0x15, 0x73, 0x67, 0xd8, 0x77, 0xf5, 0xbe, 0xf3, 0x3f, 0xc7, 0xd5, 0x7f, 0x8e,
	0x7b, 0xce, 0x13, 0x76, 0xb6, 0xf9, 0xf2, 0xaf, 0xe3, 0xd6, 0x58, 0x97, 0x9b, 0x9f, 0x03, 0x04,
	0x59, 0x12, 0x51, 0xf4, 0x2f, 0x11, 0x7b, 0x9b, 0xff, 0xef, 0xe3, 0x76, 0xf1, 0xc9, 0x17, 0x88,
	0x4e, 0x17, 0x0e, 0xea, 0xda, 0xab, 0xa1, 0x9e, 0xc2, 0xbd, 0x91, 0xa0, 0x63, 0xfc, 0x6e, 0x86,
	0x42, 0x9e, 0x11, 0x19, 0xc6, 0x6f, 0xac, 0xd1, 0x58, 0xb3, 0xc6, 0x03, 0xd8, 0x8a, 0x90, 0xf1,
	0x54, 0xcf, 0x57, 0x04, 0x4e, 0x1f, 0x8e, 0x56, 0x9a, 0x55, 0x3c, 0x17, 0x60, 0x8e, 0x04, 0x3d,
	0x27, 0x2c, 0xc4, 0xc9, 0x72, 0x83, 0xef, 0xc1, 0xbe, 0xcc, 0x08, 0x13, 0x24, 0xcc, 0x2d, 0xe1,
	0x27, 0x91, 0x22, 0xdb, 0x1c, 0xef, 0xd5, 0xb2, 0x5f, 0x46, 0xb5, 0x45, 0x6f, 0xd4, 0x17, 0xed,
	0x0c, 0xc0, 0x7a, 0xb3, 0x69, 0x45, 0xf9, 0x9b, 0x01, 0x6f, 0xe5, 0x33, 0xcf, 0x82, 0x34, 0x91,
	0xe7, 0x85, 0x51, 0xcd, 0x8f, 0x61, 0x57, 0x7b, 0xd6, 0x97, 0x8b, 0x29, 0x2a, 0xbe, 0xfd, 0xe1,
	0xa1, 0x5b, 0x5e, 0x8b, 0xab, 0x0b, 0x9f, 0x2d, 0xa6, 0x38, 0xee, 0x84, 0xcb, 0xc0, 0xfc, 0x14,
	0x76, 0x74, 0xa8, 0x54, 0x74, 0x86, 0x07, 0x6e, 0x61, 0x5d, 0xb7, 0xb4, 0xae, 0xfb, 0x88, 0x2d,
	0xce, 0x3a, 0xaf, 0x5e, 0x9c, 0xec, 0xe8, 0x26, 0xe3, 0xf2, 0x0b, 0x35, 0x41, 0x42, 0x19, 0x66,
	0xda, 0x71, 0x3a, 0xfa, 0x64, 0xf3, 0xa7, 0x5f, 0x8f, 0x5b, 0x8e, 0x05, 0xbd, 0x55, 0xa1, 0xd5,
	0x14, 0xcf, 0x0d, 0x75, 0x05, 0x1a, 0xcc, 0xaf, 0xd0, 0x1c, 0x02, 0xa8, 0x73, 0xac, 0x4f, 0x70,
	0xbf, 0x36, 0x41, 0x8e, 0x29, 0xfd, 0xed, 0xb0, 0xfc, 0x69, 0x7e, 0x06, 0x5b, 0x2a, 0xb8, 0x55,
	0xfb, 0xdb, 0xaf, 0x5e, 0x9c, 0xec, 0x3d, 0x91, 0x31, 0x66, 0x38, 0x4b, 0x55, 0x9b, 0x71, 0xf1,
	0xd5, 0x7f, 0xe8, 0x2f, 0x6e, 0xa6, 0x26, 0xb1, 0x54, 0x3f, 0x7c, 0xbe, 0x05, 0x77, 0x46, 0x82,
	0x9a, 0x01, 0xb4, 0x6b, 0x77, 0xb3, 0xd4, 0x5a, 0xf7, 0xa4, 0x65, 0xaf, 0xcf, 0x57, 0xab, 0x78,
	0xe7, 0xc7, 0x3f, 0xfe, 0xf9, 0x65, 0xe3, 0xc8, 0x39, 0xf4, 0xaa, 0xf7, 0x27, 0x37, 0x82, 0x2f,
	0xb9, 0x8f, 0x32, 0x36, 0x53, 0xd8, 0x6d, 0xf8, 0xb8, 0xdf, 0x68, 0x57, 0x87, 0xac, 0x77, 0x6f,
	0x84, 0x2a, 0xb2, 0x63, 0x45, 0xd6, 0x77, 0x8e, 0x96, 0x64, 0x59, 0x51, 0xe7, 0x07, 0xaa, 0x3d,
	0x87, 0xbd, 0xa6, 0xb5, 0xac, 0xa6, 0xfc, 0x3a, 0x66, 0x39, 0x37, 0x63, 0x15, 0xa3, 0xad, 0x18,
	0x7b, 0x4e, 0xd7, 0x6b, 0x3e, 0xaf, 0xa9, 0x3f, 0xe1, 0x34, 0x09, 0xcd, 0x1f, 0xe0, 0xde, 0xea,
	0xfd, 0x0c, 0x1a, 0x6d, 0x57, 0x50, 0xeb, 0xe1, 0x6d, 0x68, 0x45, 0xfb, 0x50, 0xd1, 0xda, 0xce,
	0xa0, 0x46, 0xab, 0x4a, 0xfd, 0xfa, 0x72, 0xbf, 0x81, 0x4e, 0xdd, 0x82, 0xbd, 0x75, 0xf3, 0xe4,
	0x88, 0xf5, 0xe0, 0x26, 0xe4, 0xb6, 0xcd, 0x46, 0x38, 0xe5, 0x22, 0x91, 0x7e, 0x61, 0xb6, 0x14,
	0xf6, 0x2f, 0x50, 0xd6, 0xdf, 0xfd, 0x26, 0x5d, 0x0d, 0x59, 0xa1, 0x5b, 0xf7, 0x6c, 0xaf, 0xa5,
	0x2b, 0xca, 0xfc, 0x6f, 0x71, 0x21, 0xce, 0xbe, 0x7a, 0x79, 0x65, 0x1b, 0xaf, 0xaf, 0x6c, 0xe3,
	0xef, 0x2b, 0xdb, 0xf8, 0xf9, 0xda, 0x6e, 0xbd, 0xbe, 0xb6, 0x5b, 0x7f, 0x5e, 0xdb, 0xad, 0xaf,
	0x3f, 0xa0, 0x89, 0x8c, 0x67, 0x81, 0x1b, 0xf2, 0xd4, 0x23, 0x13, 0x19, 0x23, 0x39, 0x61, 0x28,
	0x75, 0x9f, 0x94, 0x47, 0xb3, 0x09, 0x7a, 0xdf, 0xeb, 0x30, 0xbf, 0x45, 0x11, 0x6c, 0xab, 0x7b,
	0xfa, 0xf0, 0xdf, 0x00, 0x00, 0x00, 0xff, 0xff, 0xae, 0xbf, 0x1d, 0x5e, 0x93, 0x07, 0x00, 0x00,
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// MsgClient is the client API for Msg service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type MsgClient interface {
	SendToEth(ctx context.Context, in *MsgSendToEth, opts ...grpc.CallOption) (*MsgSendToEthResponse, error)
	RequestBatch(ctx context.Context, in *MsgRequestBatch, opts ...grpc.CallOption) (*MsgRequestBatchResponse, error)
	SubmitConfirm(ctx context.Context, in *MsgSubmitConfirm, opts ...grpc.CallOption) (*MsgSubmitConfirmResponse, error)
	CancelSendToEth(ctx context.Context, in *MsgCancelSendToEth, opts ...grpc.CallOption) (*MsgCancelSendToEthResponse, error)
	SubmitClaim(ctx context.Context, in *MsgSubmitClaim, opts ...grpc.CallOption) (*MsgSubmitClaimResponse, error)
	SetDelegateKey(ctx context.Context, in *MsgDelegateKey, opts ...grpc.CallOption) (*MsgDelegateKeyResponse, error)
}

type msgClient struct {
	cc grpc1.ClientConn
}

func NewMsgClient(cc grpc1.ClientConn) MsgClient {
	return &msgClient{cc}
}

func (c *msgClient) SendToEth(ctx context.Context, in *MsgSendToEth, opts ...grpc.CallOption) (*MsgSendToEthResponse, error) {
	out := new(MsgSendToEthResponse)
	err := c.cc.Invoke(ctx, "/peggy.v1.Msg/SendToEth", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *msgClient) RequestBatch(ctx context.Context, in *MsgRequestBatch, opts ...grpc.CallOption) (*MsgRequestBatchResponse, error) {
	out := new(MsgRequestBatchResponse)
	err := c.cc.Invoke(ctx, "/peggy.v1.Msg/RequestBatch", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *msgClient) SubmitConfirm(ctx context.Context, in *MsgSubmitConfirm, opts ...grpc.CallOption) (*MsgSubmitConfirmResponse, error) {
	out := new(MsgSubmitConfirmResponse)
	err := c.cc.Invoke(ctx, "/peggy.v1.Msg/SubmitConfirm", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *msgClient) CancelSendToEth(ctx context.Context, in *MsgCancelSendToEth, opts ...grpc.CallOption) (*MsgCancelSendToEthResponse, error) {
	out := new(MsgCancelSendToEthResponse)
	err := c.cc.Invoke(ctx, "/peggy.v1.Msg/CancelSendToEth", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *msgClient) SubmitClaim(ctx context.Context, in *MsgSubmitClaim, opts ...grpc.CallOption) (*MsgSubmitClaimResponse, error) {
	out := new(MsgSubmitClaimResponse)
	err := c.cc.Invoke(ctx, "/peggy.v1.Msg/SubmitClaim", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *msgClient) SetDelegateKey(ctx context.Context, in *MsgDelegateKey, opts ...grpc.CallOption) (*MsgDelegateKeyResponse, error) {
	out := new(MsgDelegateKeyResponse)
	err := c.cc.Invoke(ctx, "/peggy.v1.Msg/SetDelegateKey", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// MsgServer is the server API for Msg service.
type MsgServer interface {
	SendToEth(context.Context, *MsgSendToEth) (*MsgSendToEthResponse, error)
	RequestBatch(context.Context, *MsgRequestBatch) (*MsgRequestBatchResponse, error)
	SubmitConfirm(context.Context, *MsgSubmitConfirm) (*MsgSubmitConfirmResponse, error)
	CancelSendToEth(context.Context, *MsgCancelSendToEth) (*MsgCancelSendToEthResponse, error)
	SubmitClaim(context.Context, *MsgSubmitClaim) (*MsgSubmitClaimResponse, error)
	SetDelegateKey(context.Context, *MsgDelegateKey) (*MsgDelegateKeyResponse, error)
}

// UnimplementedMsgServer can be embedded to have forward compatible implementations.
type UnimplementedMsgServer struct {
}

func (*UnimplementedMsgServer) SendToEth(ctx context.Context, req *MsgSendToEth) (*MsgSendToEthResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SendToEth not implemented")
}
func (*UnimplementedMsgServer) RequestBatch(ctx context.Context, req *MsgRequestBatch) (*MsgRequestBatchResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RequestBatch not implemented")
}
func (*UnimplementedMsgServer) SubmitConfirm(ctx context.Context, req *MsgSubmitConfirm) (*MsgSubmitConfirmResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SubmitConfirm not implemented")
}
func (*UnimplementedMsgServer) CancelSendToEth(ctx context.Context, req *MsgCancelSendToEth) (*MsgCancelSendToEthResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CancelSendToEth not implemented")
}
func (*UnimplementedMsgServer) SubmitClaim(ctx context.Context, req *MsgSubmitClaim) (*MsgSubmitClaimResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SubmitClaim not implemented")
}
func (*UnimplementedMsgServer) SetDelegateKey(ctx context.Context, req *MsgDelegateKey) (*MsgDelegateKeyResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SetDelegateKey not implemented")
}

func RegisterMsgServer(s grpc1.Server, srv MsgServer) {
	s.RegisterService(&_Msg_serviceDesc, srv)
}

func _Msg_SendToEth_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MsgSendToEth)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MsgServer).SendToEth(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/peggy.v1.Msg/SendToEth",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MsgServer).SendToEth(ctx, req.(*MsgSendToEth))
	}
	return interceptor(ctx, in, info, handler)
}

func _Msg_RequestBatch_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MsgRequestBatch)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MsgServer).RequestBatch(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/peggy.v1.Msg/RequestBatch",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MsgServer).RequestBatch(ctx, req.(*MsgRequestBatch))
	}
	return interceptor(ctx, in, info, handler)
}

func _Msg_SubmitConfirm_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MsgSubmitConfirm)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MsgServer).SubmitConfirm(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/peggy.v1.Msg/SubmitConfirm",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MsgServer).SubmitConfirm(ctx, req.(*MsgSubmitConfirm))
	}
	return interceptor(ctx, in, info, handler)
}

func _Msg_CancelSendToEth_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MsgCancelSendToEth)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MsgServer).CancelSendToEth(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/peggy.v1.Msg/CancelSendToEth",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MsgServer).CancelSendToEth(ctx, req.(*MsgCancelSendToEth))
	}
	return interceptor(ctx, in, info, handler)
}

func _Msg_SubmitClaim_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MsgSubmitClaim)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MsgServer).SubmitClaim(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/peggy.v1.Msg/SubmitClaim",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MsgServer).SubmitClaim(ctx, req.(*MsgSubmitClaim))
	}
	return interceptor(ctx, in, info, handler)
}

func _Msg_SetDelegateKey_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MsgDelegateKey)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MsgServer).SetDelegateKey(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/peggy.v1.Msg/SetDelegateKey",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MsgServer).SetDelegateKey(ctx, req.(*MsgDelegateKey))
	}
	return interceptor(ctx, in, info, handler)
}

var _Msg_serviceDesc = grpc.ServiceDesc{
	ServiceName: "peggy.v1.Msg",
	HandlerType: (*MsgServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "SendToEth",
			Handler:    _Msg_SendToEth_Handler,
		},
		{
			MethodName: "RequestBatch",
			Handler:    _Msg_RequestBatch_Handler,
		},
		{
			MethodName: "SubmitConfirm",
			Handler:    _Msg_SubmitConfirm_Handler,
		},
		{
			MethodName: "CancelSendToEth",
			Handler:    _Msg_CancelSendToEth_Handler,
		},
		{
			MethodName: "SubmitClaim",
			Handler:    _Msg_SubmitClaim_Handler,
		},
		{
			MethodName: "SetDelegateKey",
			Handler:    _Msg_SetDelegateKey_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "peggy/v1/msgs.proto",
}

func (m *MsgDelegateKey) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MsgDelegateKey) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MsgDelegateKey) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.EthAddress) > 0 {
		i -= len(m.EthAddress)
		copy(dAtA[i:], m.EthAddress)
		i = encodeVarintMsgs(dAtA, i, uint64(len(m.EthAddress)))
		i--
		dAtA[i] = 0x1a
	}
	if len(m.Orchestrator) > 0 {
		i -= len(m.Orchestrator)
		copy(dAtA[i:], m.Orchestrator)
		i = encodeVarintMsgs(dAtA, i, uint64(len(m.Orchestrator)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.Validator) > 0 {
		i -= len(m.Validator)
		copy(dAtA[i:], m.Validator)
		i = encodeVarintMsgs(dAtA, i, uint64(len(m.Validator)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *MsgDelegateKeyResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MsgDelegateKeyResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MsgDelegateKeyResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	return len(dAtA) - i, nil
}

func (m *MsgSendToEth) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MsgSendToEth) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MsgSendToEth) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	{
		size, err := m.BridgeFee.MarshalToSizedBuffer(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = encodeVarintMsgs(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x22
	{
		size, err := m.Amount.MarshalToSizedBuffer(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = encodeVarintMsgs(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x1a
	if len(m.EthDest) > 0 {
		i -= len(m.EthDest)
		copy(dAtA[i:], m.EthDest)
		i = encodeVarintMsgs(dAtA, i, uint64(len(m.EthDest)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.Sender) > 0 {
		i -= len(m.Sender)
		copy(dAtA[i:], m.Sender)
		i = encodeVarintMsgs(dAtA, i, uint64(len(m.Sender)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *MsgSendToEthResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MsgSendToEthResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MsgSendToEthResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	return len(dAtA) - i, nil
}

func (m *MsgRequestBatch) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MsgRequestBatch) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MsgRequestBatch) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Denom) > 0 {
		i -= len(m.Denom)
		copy(dAtA[i:], m.Denom)
		i = encodeVarintMsgs(dAtA, i, uint64(len(m.Denom)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.Orchestrator) > 0 {
		i -= len(m.Orchestrator)
		copy(dAtA[i:], m.Orchestrator)
		i = encodeVarintMsgs(dAtA, i, uint64(len(m.Orchestrator)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *MsgRequestBatchResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MsgRequestBatchResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MsgRequestBatchResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	return len(dAtA) - i, nil
}

func (m *MsgCancelSendToEth) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MsgCancelSendToEth) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MsgCancelSendToEth) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Sender) > 0 {
		i -= len(m.Sender)
		copy(dAtA[i:], m.Sender)
		i = encodeVarintMsgs(dAtA, i, uint64(len(m.Sender)))
		i--
		dAtA[i] = 0x12
	}
	if m.TransactionId != 0 {
		i = encodeVarintMsgs(dAtA, i, uint64(m.TransactionId))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *MsgCancelSendToEthResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MsgCancelSendToEthResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MsgCancelSendToEthResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	return len(dAtA) - i, nil
}

func (m *MsgSubmitConfirm) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MsgSubmitConfirm) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MsgSubmitConfirm) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Signer) > 0 {
		i -= len(m.Signer)
		copy(dAtA[i:], m.Signer)
		i = encodeVarintMsgs(dAtA, i, uint64(len(m.Signer)))
		i--
		dAtA[i] = 0x1a
	}
	if m.Confirm != nil {
		{
			size, err := m.Confirm.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintMsgs(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x12
	}
	if m.ConfirmType != 0 {
		i = encodeVarintMsgs(dAtA, i, uint64(m.ConfirmType))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *MsgSubmitConfirmResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MsgSubmitConfirmResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MsgSubmitConfirmResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	return len(dAtA) - i, nil
}

func (m *MsgSubmitClaim) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MsgSubmitClaim) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MsgSubmitClaim) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Signer) > 0 {
		i -= len(m.Signer)
		copy(dAtA[i:], m.Signer)
		i = encodeVarintMsgs(dAtA, i, uint64(len(m.Signer)))
		i--
		dAtA[i] = 0x1a
	}
	if m.Claim != nil {
		{
			size, err := m.Claim.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintMsgs(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x12
	}
	if m.ClaimType != 0 {
		i = encodeVarintMsgs(dAtA, i, uint64(m.ClaimType))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *MsgSubmitClaimResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MsgSubmitClaimResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MsgSubmitClaimResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	return len(dAtA) - i, nil
}

func encodeVarintMsgs(dAtA []byte, offset int, v uint64) int {
	offset -= sovMsgs(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *MsgDelegateKey) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Validator)
	if l > 0 {
		n += 1 + l + sovMsgs(uint64(l))
	}
	l = len(m.Orchestrator)
	if l > 0 {
		n += 1 + l + sovMsgs(uint64(l))
	}
	l = len(m.EthAddress)
	if l > 0 {
		n += 1 + l + sovMsgs(uint64(l))
	}
	return n
}

func (m *MsgDelegateKeyResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	return n
}

func (m *MsgSendToEth) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Sender)
	if l > 0 {
		n += 1 + l + sovMsgs(uint64(l))
	}
	l = len(m.EthDest)
	if l > 0 {
		n += 1 + l + sovMsgs(uint64(l))
	}
	l = m.Amount.Size()
	n += 1 + l + sovMsgs(uint64(l))
	l = m.BridgeFee.Size()
	n += 1 + l + sovMsgs(uint64(l))
	return n
}

func (m *MsgSendToEthResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	return n
}

func (m *MsgRequestBatch) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Orchestrator)
	if l > 0 {
		n += 1 + l + sovMsgs(uint64(l))
	}
	l = len(m.Denom)
	if l > 0 {
		n += 1 + l + sovMsgs(uint64(l))
	}
	return n
}

func (m *MsgRequestBatchResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	return n
}

func (m *MsgCancelSendToEth) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.TransactionId != 0 {
		n += 1 + sovMsgs(uint64(m.TransactionId))
	}
	l = len(m.Sender)
	if l > 0 {
		n += 1 + l + sovMsgs(uint64(l))
	}
	return n
}

func (m *MsgCancelSendToEthResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	return n
}

func (m *MsgSubmitConfirm) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.ConfirmType != 0 {
		n += 1 + sovMsgs(uint64(m.ConfirmType))
	}
	if m.Confirm != nil {
		l = m.Confirm.Size()
		n += 1 + l + sovMsgs(uint64(l))
	}
	l = len(m.Signer)
	if l > 0 {
		n += 1 + l + sovMsgs(uint64(l))
	}
	return n
}

func (m *MsgSubmitConfirmResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	return n
}

func (m *MsgSubmitClaim) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.ClaimType != 0 {
		n += 1 + sovMsgs(uint64(m.ClaimType))
	}
	if m.Claim != nil {
		l = m.Claim.Size()
		n += 1 + l + sovMsgs(uint64(l))
	}
	l = len(m.Signer)
	if l > 0 {
		n += 1 + l + sovMsgs(uint64(l))
	}
	return n
}

func (m *MsgSubmitClaimResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	return n
}

func sovMsgs(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozMsgs(x uint64) (n int) {
	return sovMsgs(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *MsgDelegateKey) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowMsgs
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MsgDelegateKey: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MsgDelegateKey: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Validator", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMsgs
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthMsgs
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthMsgs
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Validator = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Orchestrator", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMsgs
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthMsgs
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthMsgs
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Orchestrator = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field EthAddress", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMsgs
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthMsgs
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthMsgs
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.EthAddress = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipMsgs(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthMsgs
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MsgDelegateKeyResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowMsgs
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MsgDelegateKeyResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MsgDelegateKeyResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipMsgs(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthMsgs
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MsgSendToEth) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowMsgs
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MsgSendToEth: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MsgSendToEth: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Sender", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMsgs
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthMsgs
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthMsgs
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Sender = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field EthDest", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMsgs
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthMsgs
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthMsgs
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.EthDest = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Amount", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMsgs
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthMsgs
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthMsgs
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.Amount.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field BridgeFee", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMsgs
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthMsgs
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthMsgs
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.BridgeFee.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipMsgs(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthMsgs
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MsgSendToEthResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowMsgs
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MsgSendToEthResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MsgSendToEthResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipMsgs(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthMsgs
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MsgRequestBatch) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowMsgs
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MsgRequestBatch: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MsgRequestBatch: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Orchestrator", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMsgs
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthMsgs
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthMsgs
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Orchestrator = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Denom", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMsgs
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthMsgs
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthMsgs
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Denom = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipMsgs(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthMsgs
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MsgRequestBatchResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowMsgs
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MsgRequestBatchResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MsgRequestBatchResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipMsgs(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthMsgs
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MsgCancelSendToEth) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowMsgs
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MsgCancelSendToEth: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MsgCancelSendToEth: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field TransactionId", wireType)
			}
			m.TransactionId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMsgs
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.TransactionId |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Sender", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMsgs
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthMsgs
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthMsgs
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Sender = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipMsgs(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthMsgs
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MsgCancelSendToEthResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowMsgs
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MsgCancelSendToEthResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MsgCancelSendToEthResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipMsgs(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthMsgs
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MsgSubmitConfirm) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowMsgs
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MsgSubmitConfirm: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MsgSubmitConfirm: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ConfirmType", wireType)
			}
			m.ConfirmType = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMsgs
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ConfirmType |= ConfirmType(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Confirm", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMsgs
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthMsgs
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthMsgs
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Confirm == nil {
				m.Confirm = &types1.Any{}
			}
			if err := m.Confirm.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Signer", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMsgs
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthMsgs
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthMsgs
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Signer = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipMsgs(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthMsgs
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MsgSubmitConfirmResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowMsgs
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MsgSubmitConfirmResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MsgSubmitConfirmResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipMsgs(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthMsgs
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MsgSubmitClaim) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowMsgs
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MsgSubmitClaim: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MsgSubmitClaim: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ClaimType", wireType)
			}
			m.ClaimType = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMsgs
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ClaimType |= ClaimType(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Claim", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMsgs
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthMsgs
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthMsgs
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Claim == nil {
				m.Claim = &types1.Any{}
			}
			if err := m.Claim.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Signer", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMsgs
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthMsgs
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthMsgs
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Signer = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipMsgs(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthMsgs
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MsgSubmitClaimResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowMsgs
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MsgSubmitClaimResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MsgSubmitClaimResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipMsgs(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthMsgs
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipMsgs(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowMsgs
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowMsgs
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowMsgs
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthMsgs
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupMsgs
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthMsgs
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthMsgs        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowMsgs          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupMsgs = fmt.Errorf("proto: unexpected end of group")
)
