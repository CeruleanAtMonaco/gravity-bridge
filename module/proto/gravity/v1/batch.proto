syntax = "proto3";
package gravity.v1;

option go_package = "github.com/cosmos/gravity-bridge/module/x/gravity/types";

import "cosmos/base/v1beta1/coin.proto";
import "gogoproto/gogo.proto";

// BatchTx represents a batch of transactions going from Cosmos to Ethereum
message BatchTx {
  uint64                      nonce    = 1;
  uint64                      timeout  = 2;
  repeated TransferTx         transactions   = 3  [(gogoproto.nullable) = false];
  string                      token_contract = 4;
  uint64                      block          = 5;
}

// TransferTx represents an individual transfer from Cosmos to Ethereum
message TransferTx {
  // cosmos account address of the sender in bech32 format
  string     sender       = 1;
  // ethereum recipient address in hex format
  string     ethereum_recipient = 2;
  // amount of the transfer represented as an sdk.Coin. The coin denomination
  // must correspond to a valid ERC20 token contract address
  cosmos.base.v1beta1.Coin erc20_token  = 3 [
    (gogoproto.nullable) = false
  ]; 
  // transfer fees for the bridge orchestrators, represented as an sdk.Coin.
  // The coin denomination must correspond to a valid ERC20 token contract address
  cosmos.base.v1beta1.Coin erc20_fee  = 4 [
    (gogoproto.nullable) = false
  ];
}

// LogicCallTx represents an individual arbitratry logic call transaction from
// Cosmos to Ethereum.
message LogicCallTx {
  // erc20 tokens represented as sdk.Coins
  repeated cosmos.base.v1beta1.Coin tokens = 1 [
    (gogoproto.nullable) = false,
    (gogoproto.castrepeated) = "github.com/cosmos/cosmos-sdk/types.Coins"
  ];
  // erc20 tokens represented as sdk.Coins used as fees for the bridge orchestrators.
  repeated cosmos.base.v1beta1.Coin fees = 2 [
    (gogoproto.nullable) = false,
    (gogoproto.castrepeated) = "github.com/cosmos/cosmos-sdk/types.Coins"
  ];
  string              logic_contract_address = 3;
  bytes               payload                = 4;
  uint64              timeout                = 5;
  bytes               invalidation_id        = 6;
  uint64              invalidation_nonce     = 7;
}
