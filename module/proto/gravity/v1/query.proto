syntax = "proto3";
package gravity.v1;

import "gravity/v1/genesis.proto";
import "gravity/v1/gravity.proto";
import "gravity/v1/msgs.proto";
import "cosmos/base/v1beta1/coin.proto";
import "google/api/annotations.proto";
import "gogoproto/gogo.proto";

option go_package = "github.com/cosmos/gravity-bridge/module/x/gravity/types";

// Query defines the gRPC querier service
service Query {
  
  // Module parameters query
  rpc Params(ParamsRequest) returns (ParamsResponse) {
    option (google.api.http).get = "/gravity/v1/params";
  }

  // single object queries
  rpc SignerSet(SignerSetRequest) returns (SignerSetResponse) {
    option (google.api.http).get = "/gravity/v1/signer_set";
  }
  rpc BatchTx(BatchTxRequest) returns (BatchTxResponse) {
    option (google.api.http).get = "/gravity/v1/batch_txs/{contract_address}/{nonce}";
  }
  rpc LogicCall(LogicCallRequest) returns (LogicCallResponse) {
    option (google.api.http).get = "/gravity/v1/batch_txs/{contract_address}/{nonce}";
  }
  
  // collection queries
  rpc SignerSets(SignerSetsRequest) returns (SignerSetsResponse) {
    option (google.api.http).get = "/gravity/v1/signer_sets";
  }
  rpc BatchTxs(BatchTxsRequest) returns (BatchTxsResponse) {
    option (google.api.http).get = "/gravity/v1/batch/batch_txs";
  }
  rpc LogicCalls(LogicCallsRequest) returns (LogicCallsResponse) {
    option (google.api.http).get = "/gravity/v1/batch/logic_calls";
  }

  // confirmation queries
  // TODO: can/should we group these into one endpoint?
  rpc SignerSetConfirms(SignerSetConfirmsRequest) returns (SignerSetConfirmsResponse) {
    option (google.api.http).get = "/gravity/v1/signer_sets/confirms";
  }
  rpc BatchConfirms(BatchConfirmsRequest) returns (BatchConfirmsResponse) {
    option (google.api.http).get = "/gravity/v1/batch_txs/confirms";
  }
  rpc LogicConfirms(LogicConfirmsRequest) returns (LogicConfirmsResponse) {
    option (google.api.http).get = "/gravity/v1/logic_calls/confirms";
  }
  
  // pending confirmation queries
  // TODO: can/should we group this into one endpoint?
  rpc PendingSignerSetConfirms(PendingSignerSetConfirmsRequest) returns (PendingSignerSetConfirmsResponse) {
    option (google.api.http).get = "/gravity/v1/signersets/{address}/pending";
  }
  rpc PendingBatchConfirms(PendingBatchConfirmsRequest) returns (PendingBatchConfirmsResponse) {
    option (google.api.http).get = "/gravity/v1/batches/{address}/pending";
  }
  rpc PendingLogicConfirms(PendingLogicConfirmsRequest) returns (PendingLogicConfirmsResponse) {
    option (google.api.http).get = "/gravity/v1/logiccalls/{address}/pending";
  }

  rpc LastSubmittedEvent(LastSubmittedEventRequest) returns (LastSubmittedEventResponse) {
    option (google.api.http).get = "/gravity/v1/oracle/event_nonce/{address}";
  }

  // Queries the fees for the given batches, results are returned 
  rpc BatchFees(BatchFeesRequest) returns (BatchFeesResponse) {
    option (google.api.http).get = "/gravity/v1/batches/fees";
  }
  // Query for info about denoms
  rpc ERC20ToDenom(ERC20ToDenomRequest) returns (ERC20ToDenomResponse) {
    option (google.api.http).get = "/gravity/v1/cosmos_originated/erc20_to_denom";
  }
  // Query for info about denoms
  rpc DenomToERC20(DenomToERC20Request) returns (DenomToERC20Response) {
    option (google.api.http).get = "/gravity/v1/cosmos_originated/denom_to_erc20";
  }
  // Query for pending transaction to send to eth
  rpc PendingOutgoingTxs(PendingOutgoingTxsRequest) returns (PendingOutgoingTxsResponse) {
    option (google.api.http).get = "/gravity/v1/query_pending_send_to_eth";
  }

  // delegate keys
  rpc DelegateKeysByValidator(DelegateKeysByValidatorAddress) returns (DelegateKeysByValidatorAddressResponse) {
    option (google.api.http).get = "/gravity/v1/delegate_keys/validator/{validator}";
  }
  rpc DelegateKeysByEth(DelegateKeysByEthAddress) returns (DelegateKeysByEthAddressResponse) {
    option (google.api.http).get = "/gravity/v1/delegate_keys/ethereum/{ethereum_address}";
  }
  rpc DelegateKeysByOrchestrator(DelegateKeysByOrchestratorAddress) returns (DelegateKeysByOrchestratorAddressResponse) {
    option (google.api.http).get = "/gravity/v1/delegate_keys/orchestrator/{orchestrator}";
  }
}

// rpc Params
message ParamsRequest {}
message ParamsResponse {
  Params params = 1 [(gogoproto.nullable) = false];
}

// rpc SignerSet
message SignerSetRequest {
  // NOTE: if nonce is not passed, then return the current
  uint64 nonce = 1;
}
message SignerSetResponse {
  EthSignerSet signer_set = 1;
}

// rpc BatchTx
message BatchTxRequest {
  uint64 nonce            = 1;
  string contract_address = 2;
}
message BatchTxResponse {
  BatchTx batch = 1;
}

// rpc LogicCall
message LogicCallRequest {
  bytes  invalidation_id    = 1;
  uint64 invalidation_nonce = 2;
}

message LogicCallResponse {
  LogicCallTx logic_call = 1;
}

// rpc SignerSetConfirms
message SignerSetConfirmsRequest {
  uint64 nonce   = 1;
  // NOTE: if address is passed, return only the signature from that validator
  string address = 2;
}
message SignerSetConfirmsResponse {
  repeated ConfirmSignerSet confirm = 1;
}

// rpc SignerSets
message SignerSetsRequest {
  int64 count = 1;
}
message SignerSetsResponse {
  repeated EthSignerSet signer_sets = 1;
}

// rpc PendingSignerSetConfirms
message PendingSignerSetConfirmsRequest {
  // NOTE: this is an sdk.AccAddress and can represent either the 
  // orchestartor address or the cooresponding validator address
  string address = 1;
}
message PendingSignerSetConfirmsResponse {
  repeated EthSignerSet signer_sets = 1;
}

message PendingBatchConfirmsRequest {
  // NOTE: this is an sdk.AccAddress and can represent either the 
  // orchestartor address or the cooresponding validator address
  string address = 1;
}
message PendingBatchConfirmsResponse {
  // Note these are returned with the signature empty
  repeated BatchTx batches = 1;
}

message BatchFeesRequest {}
message BatchFeesResponse {
  repeated cosmos.base.v1beta1.Coin fees = 1 [
      (gogoproto.nullable) = false, 
      (gogoproto.castrepeated) = "github.com/cosmos/cosmos-sdk/types.Coins"
  ];
}

message PendingLogicConfirmsRequest {
  string address = 1;
}
message PendingLogicConfirmsResponse {
  // Note these are returned with the signature empty
  repeated LogicCallTx logic_call_confirms = 1;
}

message BatchTxsRequest {}
message BatchTxsResponse {
  repeated BatchTx batches = 1;
}

message LogicCallsRequest {}
message LogicCallsResponse {
  repeated LogicCallTx calls = 1;
}


message BatchConfirmsRequest {
  uint64 nonce            = 1;
  string contract_address = 2;
}
message BatchConfirmsResponse {
  repeated ConfirmBatch confirms = 1;
}

message LogicConfirmsRequest {
  bytes  invalidation_id    = 1;
  uint64 invalidation_nonce = 2;
}
message LogicConfirmsResponse {
  repeated ConfirmLogicCall confirms = 1;
}

message LastSubmittedEventRequest {
  string address = 1;
}
message LastSubmittedEventResponse {
  uint64 event_nonce = 1;
}

message ERC20ToDenomRequest {
  string erc20 = 1;
}
message ERC20ToDenomResponse {
  string denom             = 1;
  bool   cosmos_originated = 2;
}

message DenomToERC20Request {
  string denom = 1;
}
message DenomToERC20Response {
  string erc20             = 1;
  bool   cosmos_originated = 2;
}

message DelegateKeysByValidatorAddress {
  string validator_address = 1;
}
message DelegateKeysByValidatorAddressResponse {
  string eth_address          = 1;
  string orchestrator_address = 2;
}

message DelegateKeysByEthAddress {
  string eth_address = 1;
}
message DelegateKeysByEthAddressResponse {
  string validator_address    = 1;
  string orchestrator_address = 2;
}

message DelegateKeysByOrchestratorAddress {
  string orchestrator_address = 1;
}
message DelegateKeysByOrchestratorAddressResponse {
  string validator_address = 1;
  string eth_address       = 2;
}

message PendingOutgoingTxsRequest {
  string sender_address = 1;
}
message PendingOutgoingTxsResponse {
  repeated TransferTx transfers_in_batches = 1;
  repeated TransferTx unbatched_transfers  = 2;
}
