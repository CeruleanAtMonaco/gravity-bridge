syntax = "proto3";
package gravity.v1;

import "gravity/v1/genesis.proto";
import "gravity/v1/types.proto";
import "gravity/v1/msgs.proto";
import "gravity/v1/pool.proto";
import "gravity/v1/batch.proto";
import "google/api/annotations.proto";
import "gogoproto/gogo.proto";

option go_package = "github.com/cosmos/gravity-bridge/module/x/gravity/types";

// Query defines the gRPC querier service
service Query {
  // Deployments queries deployments
  rpc Params(ParamsRequest) returns (ParamsResponse) {
    option (google.api.http).get = "/gravity/v1beta/params";
  }
  rpc SignerSet(SignerSetRequest) returns (SignerSetResponse) {
    option (google.api.http).get = "/gravity/v1beta/signersets";
  }
  rpc SignerSetConfirms(SignerSetConfirmsRequest) returns (SignerSetConfirmsResponse) {
    option (google.api.http).get = "/gravity/v1beta/signerset/confirms";
  }
  rpc RecentSignerSets(RecentSignerSetsRequest) returns (RecentSignerSetsResponse) {
    option (google.api.http).get = "/gravity/v1beta/signersets/last";
  }
  rpc BatchFees(QueryBatchFeesRequest) returns (QueryBatchFeesResponse) {
    option (google.api.http).get = "/gravity/v1beta/batches/fees";
  }
  
  rpc PendingSignerSetConfirms(PendingSignerSetConfirmsRequest) returns (PendingSignerSetConfirmsResponse) {
    option (google.api.http).get = "/gravity/v1beta/signersets/{address}/pending";
  }
  rpc PendingBatchConfirms(PendingBatchConfirmsRequest) returns (PendingBatchConfirmsResponse) {
    option (google.api.http).get = "/gravity/v1beta/batches/{address}/pending";
  }
  rpc PendingLogicConfirms(QueryPendingLogicConfirmsRequest) returns (QueryPendingLogicConfirmsResponse) {
    option (google.api.http).get = "/gravity/v1beta/logiccalls/{address}/pending";
  }

  // TODO: start here tomorrow
  rpc LastEventNonceByAddr(QueryLastEventNonceByAddrRequest) returns (QueryLastEventNonceByAddrResponse) {
    option (google.api.http).get = "/gravity/v1beta/oracle/eventnonce/{address}";
  }
  rpc OutgoingTxBatches(QueryOutgoingTxBatchesRequest) returns (QueryOutgoingTxBatchesResponse) {
    option (google.api.http).get = "/gravity/v1beta/batch/outgoingtx";
  }
  rpc OutgoingLogicCalls(QueryOutgoingLogicCallsRequest) returns (QueryOutgoingLogicCallsResponse) {
    option (google.api.http).get = "/gravity/v1beta/batch/outgoinglogic";
  }
  rpc BatchRequestByNonce(QueryBatchRequestByNonceRequest) returns (QueryBatchRequestByNonceResponse) {
    option (google.api.http).get = "/gravity/v1beta/batch/{nonce}";
  }
  rpc BatchConfirms(QueryBatchConfirmsRequest) returns (QueryBatchConfirmsResponse) {
    option (google.api.http).get = "/gravity/v1beta/batch/confirms";
  }
  rpc LogicConfirms(QueryLogicConfirmsRequest) returns (QueryLogicConfirmsResponse) {
    option (google.api.http).get = "/gravity/v1beta/logic/confirms";
  }
  rpc ERC20ToDenom(QueryERC20ToDenomRequest) returns (QueryERC20ToDenomResponse) {
    option (google.api.http).get = "/gravity/v1beta/cosmos_originated/erc20_to_denom";
  }
  rpc DenomToERC20(QueryDenomToERC20Request) returns (QueryDenomToERC20Response) {
    option (google.api.http).get = "/gravity/v1beta/cosmos_originated/denom_to_erc20";
  }

  rpc GetDelegateKeyByValidator(QueryDelegateKeysByValidatorAddress) returns (QueryDelegateKeysByValidatorAddressResponse) {
    option (google.api.http).get = "/gravity/v1beta/query_delegate_keys_by_validator";
  }
  rpc GetDelegateKeyByEth(QueryDelegateKeysByEthAddress) returns (QueryDelegateKeysByEthAddressResponse) {
    option (google.api.http).get = "/gravity/v1beta/query_delegate_keys_by_eth";
  }
  rpc GetDelegateKeyByOrchestrator(QueryDelegateKeysByOrchestratorAddress) returns (QueryDelegateKeysByOrchestratorAddressResponse) {
    option (google.api.http).get = "/gravity/v1beta/query_delegate_keys_by_orchestrator";
  }

  rpc GetPendingSendToEth(QueryPendingSendToEth) returns (QueryPendingSendToEthResponse) {
    option (google.api.http).get = "/gravity/v1beta/query_pending_send_to_eth";
  }
}

// rpc Params
message ParamsRequest {}
message ParamsResponse {
  Params params = 1 [(gogoproto.nullable) = false];
}

// rpc SignerSet
message SignerSetRequest {
  // NOTE: if nonce is not passed, then return the current
  uint64 nonce = 1;
}
message SignerSetResponse {
  EthSignerSet signer_set = 1;
}

// rpc SignerSetConfirms
message SignerSetConfirmsRequest {
  uint64 nonce   = 1;
  // NOTE: if address is passed, return only the signature from that validator
  string address = 2;
}
message SignerSetConfirmsResponse {
  repeated ConfirmSignerSet confirm = 1;
}

// rpc RecentSignerSets
message RecentSignerSetsRequest {
  int64 count = 1;
}
message RecentSignerSetsResponse {
  repeated EthSignerSet signer_sets = 1;
}

// rpc PendingSignerSetConfirms
message PendingSignerSetConfirmsRequest {
  // NOTE: this is an sdk.AccAddress and can represent either the 
  // orchestartor address or the cooresponding validator address
  string address = 1;
}
message PendingSignerSetConfirmsResponse {
  repeated EthSignerSet signer_sets = 1;
}

message PendingBatchConfirmsRequest {
  // NOTE: this is an sdk.AccAddress and can represent either the 
  // orchestartor address or the cooresponding validator address
  string address = 1;
}
message PendingBatchConfirmsResponse {
  // Note these are returned with the signature empty
  repeated BatchTx batches = 1;
}

message QueryBatchFeesRequest {}
message QueryBatchFeesResponse {
  repeated cosmos.base.v1beta1.Coin fees = 1 [
      (gogoproto.nullable) = false, 
      (gogoproto.castrepeated) = "github.com/cosmos/cosmos-sdk/types.Coins"
  ];
}

message QueryPendingLogicConfirmsRequest {
  string address = 1;
}
message QueryPendingLogicConfirmsResponse {
  // Note these are returned with the signature empty
  repeated LogicCallTx logic_call_confirms = 1;
}

message QueryOutgoingTxBatchesRequest {}
message QueryOutgoingTxBatchesResponse {
  repeated OutgoingTxBatch batches = 1;
}

message QueryOutgoingLogicCallsRequest {}
message QueryOutgoingLogicCallsResponse {
  repeated OutgoingLogicCall calls = 1;
}

message QueryBatchRequestByNonceRequest {
  uint64 nonce            = 1;
  string contract_address = 2;
}
message QueryBatchRequestByNonceResponse {
  OutgoingTxBatch batch = 1;
}

message QueryBatchConfirmsRequest {
  uint64 nonce            = 1;
  string contract_address = 2;
}
message QueryBatchConfirmsResponse {
  repeated MsgConfirmBatch confirms = 1;
}

message QueryLogicConfirmsRequest {
  bytes  invalidation_id    = 1;
  uint64 invalidation_nonce = 2;
}
message QueryLogicConfirmsResponse {
  repeated MsgConfirmLogicCall confirms = 1;
}

message QueryLastEventNonceByAddrRequest {
  string address = 1;
}
message QueryLastEventNonceByAddrResponse {
  uint64 event_nonce = 1;
}

message QueryERC20ToDenomRequest {
  string erc20 = 1;
}
message QueryERC20ToDenomResponse {
  string denom             = 1;
  bool   cosmos_originated = 2;
}

message QueryDenomToERC20Request {
  string denom = 1;
}
message QueryDenomToERC20Response {
  string erc20             = 1;
  bool   cosmos_originated = 2;
}

message QueryDelegateKeysByValidatorAddress {
  string validator_address = 1;
}
message QueryDelegateKeysByValidatorAddressResponse {
  string eth_address          = 1;
  string orchestrator_address = 2;
}

message QueryDelegateKeysByEthAddress {
  string eth_address = 1;
}
message QueryDelegateKeysByEthAddressResponse {
  string validator_address    = 1;
  string orchestrator_address = 2;
}

message QueryDelegateKeysByOrchestratorAddress {
  string orchestrator_address = 1;
}
message QueryDelegateKeysByOrchestratorAddressResponse {
  string validator_address = 1;
  string eth_address       = 2;
}

message QueryPendingSendToEth {
  string sender_address = 1;
}
message QueryPendingSendToEthResponse {
  repeated OutgoingTransferTx transfers_in_batches = 1;
  repeated OutgoingTransferTx unbatched_transfers  = 2;
}
