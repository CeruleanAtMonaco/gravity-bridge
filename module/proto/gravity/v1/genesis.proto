syntax = "proto3";
package gravity.v1;

import "gogoproto/gogo.proto";
import "gravity/v1/msgs.proto";
import "gravity/v1/confirm.proto";
import "gravity/v1/gravity.proto";

option go_package = "github.com/cosmos/gravity-bridge/module/x/gravity/types";

// Params represent the Gravity genesis and store parameters
// bridge_ethereum_address:
// is address of the bridge contract on the Ethereum side, this is a
// reference value for governance only and is not actually used by any
// Gravity code
//
// signed_valsets_window
// signed_batches_window
// signed_claims_window
//
// These values represent the time in blocks that a validator has to submit
// a signature for a batch or valset, or to submit a claim for a particular
// attestation nonce. In the case of attestations this clock starts when the
// attestation is created, but only allows for slashing once the event has passed
//
// target_batch_timeout:
//
// This is the 'target' value for when batches time out, this is a target becuase
// Ethereum is a probabalistic chain and you can't say for sure what the block
// frequency is ahead of time.
//
// average_block_time
// average_ethereum_block_time
//
// These values are the average Cosmos block time and Ethereum block time repsectively
// and they are used to copute what the target batch timeout is. It is important that
// governance updates these in case of any major, prolonged change in the time it takes
// to produce a block
//
// slash_fraction_valset
// slash_fraction_batch
// slash_fraction_claim
// slash_fraction_conflicting_claim
//
// The slashing fractions for the various gravity related slashing conditions. The first three
// refer to not submitting a particular message, the third for submitting a different claim
// for the same Ethereum event
message Params {
  option (gogoproto.stringer) = false;

  // address of the bridge contract on the EVM chain
  string bridge_contract_address     = 1;
  // unique identifier of the EVM chain
  uint64 bridge_chain_id             = 2;
// target value for when batch transactions time out on Ethereum
  uint64 target_batch_timeout        = 3;
// Average Cosmos block time used to compute batch timeout
  uint64 average_block_time          = 4;
  // Average ethereum block time used to compute batch timeout
  uint64 average_ethereum_block_time = 5;
  // amount of blocks of the rolling window required to submit a signature for a signer set confirmation.
  uint64 signerset_window       = 6;
  // amount of blocks of the rolling window required to submit a signature for a batch transaction.
  uint64 batch_tx_window       = 7;
  // amount of blocks of the rolling window required to attest an ethereum event.
  uint64 event_window        = 8;
  uint64 unbonding_window = 9;
  // slashing fraction for not signing a signerset confirmation
  string  slash_fraction_signerset       = 10 [
    (gogoproto.customtype) = "github.com/cosmos/cosmos-sdk/types.Dec",
    (gogoproto.nullable)   = false
  ];
  // slashing fraction for not signing an outgoing batch transaction to ethereum
  string slash_fraction_batch = 11 [
    (gogoproto.customtype) = "github.com/cosmos/cosmos-sdk/types.Dec",
    (gogoproto.nullable)   = false
  ];
  // slashing fraction for not signing events
  string slash_fraction_event = 12 [
    (gogoproto.customtype) = "github.com/cosmos/cosmos-sdk/types.Dec",
    (gogoproto.nullable)   = false
  ];
  // slashing fraction for submitting a conflicting event from Ethereum
  string slash_fraction_conflicting_event = 13 [
    (gogoproto.customtype) = "github.com/cosmos/cosmos-sdk/types.Dec",
    (gogoproto.nullable)   = false
  ];
}

// ERC20ToDenom records the relationship between an ERC20 token contract and the
// denomination of the corresponding Cosmos coin.
message ERC20ToDenom {
  // token contract address in hex format
  string erc20_address = 1;
  // coin denomination
  string denom = 2;
}

// GenesisState struct
message GenesisState {
  Params                      params              = 1 [(gogoproto.nullable) = false];
  uint64                      last_observed_nonce = 2;
  repeated EthSignerSet             signersets             = 3 [(gogoproto.nullable) = false];
  // requested batc transactions
  repeated BatchTx    batch_txs             = 4 [(gogoproto.nullable) = false];
  repeated LogicCallTx  logic_call_txs         = 5 [(gogoproto.nullable) = false];
  // unbatched transfer transactions
  repeated TransferTx transfer_txs = 6 [(gogoproto.nullable) = false];
  repeated ConfirmSignerSet      valset_confirms     = 7 [(gogoproto.nullable) = false];
  repeated ConfirmBatch       batch_confirms      = 8 [(gogoproto.nullable) = false];
  repeated ConfirmLogicCall   logic_call_confirms = 9 [(gogoproto.nullable) = false];
  repeated Attestation        attestations        = 10 [(gogoproto.nullable) = false];
  repeated MsgDelegateKey     delegate_keys       = 11 [(gogoproto.nullable) = false];
  repeated ERC20ToDenom       erc20_to_denoms     = 12 [(gogoproto.nullable) = false];
}
